// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* SCAP-Services.h
   Generated by wsdl2h 2.8.28 from http://localhost:8000/ACService.wsdl http://localhost:8000/ASService.wsdl http://localhost:8000/PDFSignature.wsdl and ACService/typemap.dat
   2017-09-14 17:11:54 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on SCAP-Services.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService"
ns2 = "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService"
ns5 = "http://www.w3.org/2000/09/xmldsig#"
ns3 = "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"
ns4 = "http://www.cartaodecidadao.pt/ccc/commons/messages/Types"
ns1 = "http://uri.etsi.org/01903/v1.3.2#"
ns7 = "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG"
ns2 = "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"
ns3 = "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"
ns4 = "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService"
//gsoap ns1   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService"
//gsoap ns2   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

/// <PRE><BLOCKQUOTE>
///   XAdES schema for i-roles
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns5	"http://www.w3.org/2000/09/xmldsig#"
//gsoap ns5   schema namespace:	http://www.w3.org/2000/09/xmldsig#
//gsoap ns5   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"
//gsoap ns3   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"http://www.cartaodecidadao.pt/ccc/commons/messages/Types"
//gsoap ns4   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/Types
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

/// <PRE><BLOCKQUOTE>
///   XAdES schema for QualifyingProperties from ETSI
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns1	"http://uri.etsi.org/01903/v1.3.2#"
//gsoap ns1   schema namespace:	http://uri.etsi.org/01903/v1.3.2#
//gsoap ns1   schema form:	unqualified

/// <PRE><BLOCKQUOTE>
///   SVG schema for i-roles
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns7	"http://www.cartaodecidadao.pt/ccc/commons/messages/SVG"
//gsoap ns7   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/SVG
//gsoap ns7   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"
//gsoap ns2   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"
//gsoap ns3   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature"
//gsoap ns4   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature
//gsoap ns4   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:date".
typedef std::string xsd__date;

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns2__AttributeRequestType.
class ns2__AttributeRequestType;

//  Forward declaration of class ns2__SingleAttributeRequestType.
class ns2__SingleAttributeRequestType;

//  Forward declaration of class ns2__PSAAttributeRequestType.
class ns2__PSAAttributeRequestType;

//  Forward declaration of class ns2__AttributeSupplierListType.
class ns2__AttributeSupplierListType;

//  Forward declaration of class ns2__AttributeResponseType.
class ns2__AttributeResponseType;

//  Forward declaration of class ns2__SingleAttributeResponseType.
class ns2__SingleAttributeResponseType;

//  Forward declaration of class ns2__UnsignedAttributeResponseType.
class ns2__UnsignedAttributeResponseType;

//  Forward declaration of class ns2__AttributesType.
class ns2__AttributesType;

//  Forward declaration of class ns2__UnsignedAttributesType.
class ns2__UnsignedAttributesType;

//  Forward declaration of class ns2__SignedAttributesType.
class ns2__SignedAttributesType;

//  Forward declaration of class ns2__UnsignedAttributesBasicType.
class ns2__UnsignedAttributesBasicType;

//  Forward declaration of class ns2__ResponseResult.
class ns2__ResponseResult;

//  Forward declaration of class ns5__SignatureType.
class ns5__SignatureType;

//  Forward declaration of class ns5__SignedInfoType.
class ns5__SignedInfoType;

//  Forward declaration of class ns5__CanonicalizationMethodType.
class ns5__CanonicalizationMethodType;

//  Forward declaration of class ns5__SignatureMethodType.
class ns5__SignatureMethodType;

//  Forward declaration of class ns5__ReferenceType.
class ns5__ReferenceType;

//  Forward declaration of class ns5__TransformsType.
class ns5__TransformsType;

//  Forward declaration of class ns5__TransformType.
class ns5__TransformType;

//  Forward declaration of class ns5__DigestMethodType.
class ns5__DigestMethodType;

//  Forward declaration of class ns5__KeyInfoType.
class ns5__KeyInfoType;

//  Forward declaration of class ns5__X509DataType.
class ns5__X509DataType;

//  Forward declaration of class ns5__ObjectType.
class ns5__ObjectType;

//  Forward declaration of class ns5__X509CertificateType.
class ns5__X509CertificateType;

//  Forward declaration of class ns5__DigestValueType.
class ns5__DigestValueType;

//  Forward declaration of class ns5__SignatureValueType.
class ns5__SignatureValueType;

//  Forward declaration of class ns3__AttributeType.
class ns3__AttributeType;

//  Forward declaration of class ns3__AttributeSupplierType.
class ns3__AttributeSupplierType;

//  Forward declaration of class ns3__PersonalDataType.
class ns3__PersonalDataType;

//  Forward declaration of class ns3__ExtraIDListType.
class ns3__ExtraIDListType;

//  Forward declaration of class ns3__ExtraIDType.
class ns3__ExtraIDType;

//  Forward declaration of class ns3__MainAttributeType.
class ns3__MainAttributeType;

//  Forward declaration of class ns3__LegalActListType.
class ns3__LegalActListType;

//  Forward declaration of class ns3__SubAttributeListType.
class ns3__SubAttributeListType;

//  Forward declaration of class ns3__SubAttributeType.
class ns3__SubAttributeType;

//  Forward declaration of class ns3__ResponseCodeStatusType.
class ns3__ResponseCodeStatusType;

//  Forward declaration of class ns1__QualifyingPropertiesType.
class ns1__QualifyingPropertiesType;

//  Forward declaration of class ns1__SignedPropertiesType.
class ns1__SignedPropertiesType;

//  Forward declaration of class ns1__SignedSignaturePropertiesType.
class ns1__SignedSignaturePropertiesType;

//  Forward declaration of class ns1__SigningCertificateType.
class ns1__SigningCertificateType;

//  Forward declaration of class ns1__CertType.
class ns1__CertType;

//  Forward declaration of class ns1__CertDigestType.
class ns1__CertDigestType;

//  Forward declaration of class ns1__IssuerSerialType.
class ns1__IssuerSerialType;

//  Forward declaration of class ns1__SignerRoleType.
class ns1__SignerRoleType;

//  Forward declaration of class ns1__ClaimedRolesListType.
class ns1__ClaimedRolesListType;

//  Forward declaration of class ns1__ClaimedRoleType.
class ns1__ClaimedRoleType;

//  Forward declaration of class ns1__UnsignedPropertiesType.
class ns1__UnsignedPropertiesType;

//  Forward declaration of class ns1__UnsignedSignaturePropertiesType.
class ns1__UnsignedSignaturePropertiesType;

//  Forward declaration of class ns1__CounterSignatureType.
class ns1__CounterSignatureType;

//  Forward declaration of class ns1__SignatureTimeStampType.
class ns1__SignatureTimeStampType;

//  Forward declaration of class ns1__CompleteCertificateRefsType.
class ns1__CompleteCertificateRefsType;

//  Forward declaration of class ns1__CertRefsType.
class ns1__CertRefsType;

//  Forward declaration of class ns1__CompleteRevocationRefsType.
class ns1__CompleteRevocationRefsType;

//  Forward declaration of class ns1__CRLRefsType.
class ns1__CRLRefsType;

//  Forward declaration of class ns1__CRLRefType.
class ns1__CRLRefType;

//  Forward declaration of class ns1__DigestAlgAndValueType.
class ns1__DigestAlgAndValueType;

//  Forward declaration of class ns1__CRLIdentifierType.
class ns1__CRLIdentifierType;

//  Forward declaration of class ns1__OCSPRefsType.
class ns1__OCSPRefsType;

//  Forward declaration of class ns1__OCSPRefType.
class ns1__OCSPRefType;

//  Forward declaration of class ns1__OCSPIdentifierType.
class ns1__OCSPIdentifierType;

//  Forward declaration of class ns1__ResponderIDType.
class ns1__ResponderIDType;

//  Forward declaration of class ns1__SigAndRefsTimeStampType.
class ns1__SigAndRefsTimeStampType;

//  Forward declaration of class ns1__CertificateValuesType.
class ns1__CertificateValuesType;

//  Forward declaration of class ns1__EncapsulatedX509CertificateType.
class ns1__EncapsulatedX509CertificateType;

//  Forward declaration of class ns1__RevocationValuesType.
class ns1__RevocationValuesType;

//  Forward declaration of class ns1__CRLValuesType.
class ns1__CRLValuesType;

//  Forward declaration of class ns1__EncapsulatedCRLValueType.
class ns1__EncapsulatedCRLValueType;

//  Forward declaration of class ns1__OCSPValuesType.
class ns1__OCSPValuesType;

//  Forward declaration of class ns1__EncapsulatedOCSPValueType.
class ns1__EncapsulatedOCSPValueType;

//  Forward declaration of class ns1__ArchiveTimeStampType.
class ns1__ArchiveTimeStampType;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":Issuer.
typedef _XML _ns1__Issuer;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":IssueTime.
typedef _XML _ns1__IssueTime;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":Number.
typedef _XML _ns1__Number;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ByName.
typedef _XML _ns1__ByName;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ProducedAt.
typedef _XML _ns1__ProducedAt;

//  Forward declaration of class ns7__SVGListType.
class ns7__SVGListType;

//  Forward declaration of class ns3__AttributeSupplierResponseType.
class ns3__AttributeSupplierResponseType;

//  Forward declaration of class ns4__SignRequest.
class ns4__SignRequest;

//  Forward declaration of class ns4__PersonalDataType.
class ns4__PersonalDataType;

//  Forward declaration of class ns4__AttributeListType.
class ns4__AttributeListType;

//  Forward declaration of class ns4__AttributeType.
class ns4__AttributeType;

//  Forward declaration of class ns4__AttributeSupplierType.
class ns4__AttributeSupplierType;

//  Forward declaration of class ns4__MainAttributeType.
class ns4__MainAttributeType;

//  Forward declaration of class ns4__LegalActListType.
class ns4__LegalActListType;

//  Forward declaration of class ns4__SubAttributeListType.
class ns4__SubAttributeListType;

//  Forward declaration of class ns4__SubAttributeType.
class ns4__SubAttributeType;

//  Forward declaration of class ns4__SignResponse.
class ns4__SignResponse;

//  Forward declaration of class ns4__Status.
class ns4__Status;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509IssuerNameType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns5__X509IssuerNameType;

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509SerialNumberType is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns5__X509SerialNumberType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 40.
typedef std::string ns4__ProcessIDType: 40;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NameType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ValidityType is a simpleType restriction of XSD type xs:date.
///
typedef xsd__date ns4__ValidityType;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DateType is a simpleType restriction of XSD type xs:date.
///
typedef xsd__date ns4__DateType;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NICType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NICType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NIPCType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__CompanyNameType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ExtraIDValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__ExtraIDValueType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__AttributeIDType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":LegalActType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 2048.
typedef std::string ns4__LegalActType: 2048;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":SubAttributeValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__SubAttributeValueType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__DescriptionType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 5.
typedef std::string ns4__ResponseCodeType: 5;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeMessage is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 1024.
typedef std::string ns4__ResponseCodeMessage: 1024;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SigningTimeType is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t ns1__SigningTimeType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStampType is a simpleType restriction of XSD type xs:base64Binary.
///
typedef xsd__base64Binary ns1__EncapsulatedTimeStampType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":IssuerType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns1__IssuerType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":IssueTimeType is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t ns1__IssueTimeType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":NumberType is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns1__NumberType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ByNameType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns1__ByNameType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ProducedAtType is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t ns1__ProducedAtType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGType is a simpleType restriction of XSD type xs:base64Binary.
///
typedef xsd__base64Binary ns7__SVGType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignatureOrientationEnumType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns4__SignatureOrientationEnumType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__SignatureOrientationEnumType
{
	ns4__SignatureOrientationEnumType__LANDSCAPE,	///< xs:string value="LANDSCAPE"
	ns4__SignatureOrientationEnumType__PORTRAIT,	///< xs:string value="PORTRAIT"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeRequestType is a complexType.
///
/// class ns2__AttributeRequestType operations:
/// - ns2__AttributeRequestType* soap_new_ns2__AttributeRequestType(soap*) allocate
/// - ns2__AttributeRequestType* soap_new_ns2__AttributeRequestType(soap*, int num) allocate array
/// - ns2__AttributeRequestType* soap_new_req_ns2__AttributeRequestType(soap*, ...) allocate, set required members
/// - ns2__AttributeRequestType* soap_new_set_ns2__AttributeRequestType(soap*, ...) allocate, set all public members
/// - ns2__AttributeRequestType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AttributeRequestType(soap*, ns2__AttributeRequestType*) deserialize from a stream
/// - int soap_write_ns2__AttributeRequestType(soap*, ns2__AttributeRequestType*) serialize to a stream
/// - ns2__AttributeRequestType* ns2__AttributeRequestType::soap_dup(soap*) returns deep copy of ns2__AttributeRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeRequestType::soap_del() deep deletes ns2__AttributeRequestType data members, use only after ns2__AttributeRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeRequestType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "Citizen" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               Citizen                        1;	///< Required element.
/// Element "AttributeSuppliers" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeSupplierListType.
    ns2__AttributeSupplierListType*      AttributeSuppliers             1;	///< Required element.
/// Element "AllEnterprises" of XSD type xs:boolean.
    bool*                                AllEnterprises                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeRequestType is a complexType.
///
/// class ns2__SingleAttributeRequestType operations:
/// - ns2__SingleAttributeRequestType* soap_new_ns2__SingleAttributeRequestType(soap*) allocate
/// - ns2__SingleAttributeRequestType* soap_new_ns2__SingleAttributeRequestType(soap*, int num) allocate array
/// - ns2__SingleAttributeRequestType* soap_new_req_ns2__SingleAttributeRequestType(soap*, ...) allocate, set required members
/// - ns2__SingleAttributeRequestType* soap_new_set_ns2__SingleAttributeRequestType(soap*, ...) allocate, set all public members
/// - ns2__SingleAttributeRequestType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__SingleAttributeRequestType(soap*, ns2__SingleAttributeRequestType*) deserialize from a stream
/// - int soap_write_ns2__SingleAttributeRequestType(soap*, ns2__SingleAttributeRequestType*) serialize to a stream
/// - ns2__SingleAttributeRequestType* ns2__SingleAttributeRequestType::soap_dup(soap*) returns deep copy of ns2__SingleAttributeRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SingleAttributeRequestType::soap_del() deep deletes ns2__SingleAttributeRequestType data members, use only after ns2__SingleAttributeRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SingleAttributeRequestType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "Citizen" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               Citizen                        1;	///< Required element.
/// Element "AttributeSuppliers" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          AttributeSuppliers             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":PSAAttributeRequestType is a complexType.
///
/// class ns2__PSAAttributeRequestType operations:
/// - ns2__PSAAttributeRequestType* soap_new_ns2__PSAAttributeRequestType(soap*) allocate
/// - ns2__PSAAttributeRequestType* soap_new_ns2__PSAAttributeRequestType(soap*, int num) allocate array
/// - ns2__PSAAttributeRequestType* soap_new_req_ns2__PSAAttributeRequestType(soap*, ...) allocate, set required members
/// - ns2__PSAAttributeRequestType* soap_new_set_ns2__PSAAttributeRequestType(soap*, ...) allocate, set all public members
/// - ns2__PSAAttributeRequestType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PSAAttributeRequestType(soap*, ns2__PSAAttributeRequestType*) deserialize from a stream
/// - int soap_write_ns2__PSAAttributeRequestType(soap*, ns2__PSAAttributeRequestType*) serialize to a stream
/// - ns2__PSAAttributeRequestType* ns2__PSAAttributeRequestType::soap_dup(soap*) returns deep copy of ns2__PSAAttributeRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PSAAttributeRequestType::soap_del() deep deletes ns2__PSAAttributeRequestType data members, use only after ns2__PSAAttributeRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PSAAttributeRequestType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "Citizen" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               Citizen                        1;	///< Required element.
/// Element "CompanyId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType.
    ns4__NIPCType*                       CompanyId                      0;	///< Optional element.
/// Element "CompanyName" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType.
    ns4__CompanyNameType*                CompanyName                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeSupplierListType is a complexType.
///
/// class ns2__AttributeSupplierListType operations:
/// - ns2__AttributeSupplierListType* soap_new_ns2__AttributeSupplierListType(soap*) allocate
/// - ns2__AttributeSupplierListType* soap_new_ns2__AttributeSupplierListType(soap*, int num) allocate array
/// - ns2__AttributeSupplierListType* soap_new_req_ns2__AttributeSupplierListType(soap*, ...) allocate, set required members
/// - ns2__AttributeSupplierListType* soap_new_set_ns2__AttributeSupplierListType(soap*, ...) allocate, set all public members
/// - ns2__AttributeSupplierListType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AttributeSupplierListType(soap*, ns2__AttributeSupplierListType*) deserialize from a stream
/// - int soap_write_ns2__AttributeSupplierListType(soap*, ns2__AttributeSupplierListType*) serialize to a stream
/// - ns2__AttributeSupplierListType* ns2__AttributeSupplierListType::soap_dup(soap*) returns deep copy of ns2__AttributeSupplierListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeSupplierListType::soap_del() deep deletes ns2__AttributeSupplierListType data members, use only after ns2__AttributeSupplierListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeSupplierListType
{ public:
/// Vector of ns3__AttributeSupplierType* of length 1..unbounded.
    std::vector<ns3__AttributeSupplierType*> AttributeSupplier              1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeResponseType is a complexType.
///
/// class ns2__AttributeResponseType operations:
/// - ns2__AttributeResponseType* soap_new_ns2__AttributeResponseType(soap*) allocate
/// - ns2__AttributeResponseType* soap_new_ns2__AttributeResponseType(soap*, int num) allocate array
/// - ns2__AttributeResponseType* soap_new_req_ns2__AttributeResponseType(soap*, ...) allocate, set required members
/// - ns2__AttributeResponseType* soap_new_set_ns2__AttributeResponseType(soap*, ...) allocate, set all public members
/// - ns2__AttributeResponseType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AttributeResponseType(soap*, ns2__AttributeResponseType*) deserialize from a stream
/// - int soap_write_ns2__AttributeResponseType(soap*, ns2__AttributeResponseType*) serialize to a stream
/// - ns2__AttributeResponseType* ns2__AttributeResponseType::soap_dup(soap*) returns deep copy of ns2__AttributeResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeResponseType::soap_del() deep deletes ns2__AttributeResponseType data members, use only after ns2__AttributeResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeResponseType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Vector of ns2__AttributesType* of length 1..unbounded.
    std::vector<ns2__AttributesType*   > AttributeResponseValues        1;
/// Element "ErrorMessage" of XSD type xs:string.
    std::string*                         ErrorMessage                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeResponseType is a complexType.
///
/// class ns2__SingleAttributeResponseType operations:
/// - ns2__SingleAttributeResponseType* soap_new_ns2__SingleAttributeResponseType(soap*) allocate
/// - ns2__SingleAttributeResponseType* soap_new_ns2__SingleAttributeResponseType(soap*, int num) allocate array
/// - ns2__SingleAttributeResponseType* soap_new_req_ns2__SingleAttributeResponseType(soap*, ...) allocate, set required members
/// - ns2__SingleAttributeResponseType* soap_new_set_ns2__SingleAttributeResponseType(soap*, ...) allocate, set all public members
/// - ns2__SingleAttributeResponseType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__SingleAttributeResponseType(soap*, ns2__SingleAttributeResponseType*) deserialize from a stream
/// - int soap_write_ns2__SingleAttributeResponseType(soap*, ns2__SingleAttributeResponseType*) serialize to a stream
/// - ns2__SingleAttributeResponseType* ns2__SingleAttributeResponseType::soap_dup(soap*) returns deep copy of ns2__SingleAttributeResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SingleAttributeResponseType::soap_del() deep deletes ns2__SingleAttributeResponseType data members, use only after ns2__SingleAttributeResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SingleAttributeResponseType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "AttributeResponseValues" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributesType.
    ns2__AttributesType*                 AttributeResponseValues        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributeResponseType is a complexType.
///
/// class ns2__UnsignedAttributeResponseType operations:
/// - ns2__UnsignedAttributeResponseType* soap_new_ns2__UnsignedAttributeResponseType(soap*) allocate
/// - ns2__UnsignedAttributeResponseType* soap_new_ns2__UnsignedAttributeResponseType(soap*, int num) allocate array
/// - ns2__UnsignedAttributeResponseType* soap_new_req_ns2__UnsignedAttributeResponseType(soap*, ...) allocate, set required members
/// - ns2__UnsignedAttributeResponseType* soap_new_set_ns2__UnsignedAttributeResponseType(soap*, ...) allocate, set all public members
/// - ns2__UnsignedAttributeResponseType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__UnsignedAttributeResponseType(soap*, ns2__UnsignedAttributeResponseType*) deserialize from a stream
/// - int soap_write_ns2__UnsignedAttributeResponseType(soap*, ns2__UnsignedAttributeResponseType*) serialize to a stream
/// - ns2__UnsignedAttributeResponseType* ns2__UnsignedAttributeResponseType::soap_dup(soap*) returns deep copy of ns2__UnsignedAttributeResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnsignedAttributeResponseType::soap_del() deep deletes ns2__UnsignedAttributeResponseType data members, use only after ns2__UnsignedAttributeResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnsignedAttributeResponseType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "CompanyId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType.
    ns4__NIPCType*                       CompanyId                      0;	///< Optional element.
/// Element "CompanyName" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType.
    ns4__CompanyNameType*                CompanyName                    0;	///< Optional element.
/// Element "AttributeResponseValues" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesType.
    ns2__UnsignedAttributesType*         AttributeResponseValues        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributesType is a complexType.
///
/// class ns2__AttributesType operations:
/// - ns2__AttributesType* soap_new_ns2__AttributesType(soap*) allocate
/// - ns2__AttributesType* soap_new_ns2__AttributesType(soap*, int num) allocate array
/// - ns2__AttributesType* soap_new_req_ns2__AttributesType(soap*, ...) allocate, set required members
/// - ns2__AttributesType* soap_new_set_ns2__AttributesType(soap*, ...) allocate, set all public members
/// - ns2__AttributesType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AttributesType(soap*, ns2__AttributesType*) deserialize from a stream
/// - int soap_write_ns2__AttributesType(soap*, ns2__AttributesType*) serialize to a stream
/// - ns2__AttributesType* ns2__AttributesType::soap_dup(soap*) returns deep copy of ns2__AttributesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributesType::soap_del() deep deletes ns2__AttributesType data members, use only after ns2__AttributesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributesType
{ public:
/// Element "ATTRSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          ATTRSupplier                   1;	///< Required element.
/// Element "ResponseResult" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":ResponseResult.
    ns2__ResponseResult*                 ResponseResult                 1;	///< Required element.
/// Element "SignedAttributes" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SignedAttributesType.
    ns2__SignedAttributesType*           SignedAttributes               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesType is a complexType.
///
/// class ns2__UnsignedAttributesType operations:
/// - ns2__UnsignedAttributesType* soap_new_ns2__UnsignedAttributesType(soap*) allocate
/// - ns2__UnsignedAttributesType* soap_new_ns2__UnsignedAttributesType(soap*, int num) allocate array
/// - ns2__UnsignedAttributesType* soap_new_req_ns2__UnsignedAttributesType(soap*, ...) allocate, set required members
/// - ns2__UnsignedAttributesType* soap_new_set_ns2__UnsignedAttributesType(soap*, ...) allocate, set all public members
/// - ns2__UnsignedAttributesType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__UnsignedAttributesType(soap*, ns2__UnsignedAttributesType*) deserialize from a stream
/// - int soap_write_ns2__UnsignedAttributesType(soap*, ns2__UnsignedAttributesType*) serialize to a stream
/// - ns2__UnsignedAttributesType* ns2__UnsignedAttributesType::soap_dup(soap*) returns deep copy of ns2__UnsignedAttributesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnsignedAttributesType::soap_del() deep deletes ns2__UnsignedAttributesType data members, use only after ns2__UnsignedAttributesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnsignedAttributesType
{ public:
/// Element "ResponseResult" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":ResponseResult.
    ns2__ResponseResult*                 ResponseResult                 1;	///< Required element.
/// Element "UnsignedAttributes" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesBasicType.
    ns2__UnsignedAttributesBasicType*    UnsignedAttributes             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SignedAttributesType is a complexType.
///
/// class ns2__SignedAttributesType operations:
/// - ns2__SignedAttributesType* soap_new_ns2__SignedAttributesType(soap*) allocate
/// - ns2__SignedAttributesType* soap_new_ns2__SignedAttributesType(soap*, int num) allocate array
/// - ns2__SignedAttributesType* soap_new_req_ns2__SignedAttributesType(soap*, ...) allocate, set required members
/// - ns2__SignedAttributesType* soap_new_set_ns2__SignedAttributesType(soap*, ...) allocate, set all public members
/// - ns2__SignedAttributesType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__SignedAttributesType(soap*, ns2__SignedAttributesType*) deserialize from a stream
/// - int soap_write_ns2__SignedAttributesType(soap*, ns2__SignedAttributesType*) serialize to a stream
/// - ns2__SignedAttributesType* ns2__SignedAttributesType::soap_dup(soap*) returns deep copy of ns2__SignedAttributesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SignedAttributesType::soap_del() deep deletes ns2__SignedAttributesType data members, use only after ns2__SignedAttributesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SignedAttributesType
{ public:
/// Vector of ns5__SignatureType* element refs of length 1..unbounded.
    std::vector<ns5__SignatureType*    > ns3__SignatureAttribute        1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesBasicType is a complexType.
///
/// class ns2__UnsignedAttributesBasicType operations:
/// - ns2__UnsignedAttributesBasicType* soap_new_ns2__UnsignedAttributesBasicType(soap*) allocate
/// - ns2__UnsignedAttributesBasicType* soap_new_ns2__UnsignedAttributesBasicType(soap*, int num) allocate array
/// - ns2__UnsignedAttributesBasicType* soap_new_req_ns2__UnsignedAttributesBasicType(soap*, ...) allocate, set required members
/// - ns2__UnsignedAttributesBasicType* soap_new_set_ns2__UnsignedAttributesBasicType(soap*, ...) allocate, set all public members
/// - ns2__UnsignedAttributesBasicType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__UnsignedAttributesBasicType(soap*, ns2__UnsignedAttributesBasicType*) deserialize from a stream
/// - int soap_write_ns2__UnsignedAttributesBasicType(soap*, ns2__UnsignedAttributesBasicType*) serialize to a stream
/// - ns2__UnsignedAttributesBasicType* ns2__UnsignedAttributesBasicType::soap_dup(soap*) returns deep copy of ns2__UnsignedAttributesBasicType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnsignedAttributesBasicType::soap_del() deep deletes ns2__UnsignedAttributesBasicType data members, use only after ns2__UnsignedAttributesBasicType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnsignedAttributesBasicType
{ public:
/// Vector of ns3__AttributeType* element refs of length 1..unbounded.
    std::vector<ns3__AttributeType*    > ns3__Attribute                 1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":ResponseResult is a complexType.
///
/// class ns2__ResponseResult operations:
/// - ns2__ResponseResult* soap_new_ns2__ResponseResult(soap*) allocate
/// - ns2__ResponseResult* soap_new_ns2__ResponseResult(soap*, int num) allocate array
/// - ns2__ResponseResult* soap_new_req_ns2__ResponseResult(soap*, ...) allocate, set required members
/// - ns2__ResponseResult* soap_new_set_ns2__ResponseResult(soap*, ...) allocate, set all public members
/// - ns2__ResponseResult::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ResponseResult(soap*, ns2__ResponseResult*) deserialize from a stream
/// - int soap_write_ns2__ResponseResult(soap*, ns2__ResponseResult*) serialize to a stream
/// - ns2__ResponseResult* ns2__ResponseResult::soap_dup(soap*) returns deep copy of ns2__ResponseResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ResponseResult::soap_del() deep deletes ns2__ResponseResult data members, use only after ns2__ResponseResult::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ResponseResult
{ public:
/// Element "ResultCode" of XSD type xs:string.
    std::string                          ResultCode                     1;	///< Required element.
/// Element "ResultMessage" of XSD type xs:string.
    std::string                          ResultMessage                  1;	///< Required element.
/// Element "CitizenIDWithExtraInfo" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               CitizenIDWithExtraInfo         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignatureType is a complexType.
///
/// class ns5__SignatureType operations:
/// - ns5__SignatureType* soap_new_ns5__SignatureType(soap*) allocate
/// - ns5__SignatureType* soap_new_ns5__SignatureType(soap*, int num) allocate array
/// - ns5__SignatureType* soap_new_req_ns5__SignatureType(soap*, ...) allocate, set required members
/// - ns5__SignatureType* soap_new_set_ns5__SignatureType(soap*, ...) allocate, set all public members
/// - ns5__SignatureType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__SignatureType(soap*, ns5__SignatureType*) deserialize from a stream
/// - int soap_write_ns5__SignatureType(soap*, ns5__SignatureType*) serialize to a stream
/// - ns5__SignatureType* ns5__SignatureType::soap_dup(soap*) returns deep copy of ns5__SignatureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignatureType::soap_del() deep deletes ns5__SignatureType data members, use only after ns5__SignatureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignatureType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":SignedInfo.
    ns5__SignedInfoType*                 ns5__SignedInfo                1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":SignatureValue.
    ns5__SignatureValueType*             ns5__SignatureValue            1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":KeyInfo.
    ns5__KeyInfoType*                    ns5__KeyInfo                   1;	///< Required element.
/// Vector of ns5__ObjectType* element refs of length 0..unbounded.
    std::vector<ns5__ObjectType*       > ns5__Object                    0;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignedInfoType is a complexType.
///
/// class ns5__SignedInfoType operations:
/// - ns5__SignedInfoType* soap_new_ns5__SignedInfoType(soap*) allocate
/// - ns5__SignedInfoType* soap_new_ns5__SignedInfoType(soap*, int num) allocate array
/// - ns5__SignedInfoType* soap_new_req_ns5__SignedInfoType(soap*, ...) allocate, set required members
/// - ns5__SignedInfoType* soap_new_set_ns5__SignedInfoType(soap*, ...) allocate, set all public members
/// - ns5__SignedInfoType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__SignedInfoType(soap*, ns5__SignedInfoType*) deserialize from a stream
/// - int soap_write_ns5__SignedInfoType(soap*, ns5__SignedInfoType*) serialize to a stream
/// - ns5__SignedInfoType* ns5__SignedInfoType::soap_dup(soap*) returns deep copy of ns5__SignedInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignedInfoType::soap_del() deep deletes ns5__SignedInfoType data members, use only after ns5__SignedInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignedInfoType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":SignatureMethod.
    ns5__SignatureMethodType*            ns5__SignatureMethod           1;	///< Required element.
/// Vector of ns5__ReferenceType* element refs of length 1..unbounded.
    std::vector<ns5__ReferenceType*    > ns5__Reference                 1;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethodType is a complexType.
///
/// class ns5__CanonicalizationMethodType operations:
/// - ns5__CanonicalizationMethodType* soap_new_ns5__CanonicalizationMethodType(soap*) allocate
/// - ns5__CanonicalizationMethodType* soap_new_ns5__CanonicalizationMethodType(soap*, int num) allocate array
/// - ns5__CanonicalizationMethodType* soap_new_req_ns5__CanonicalizationMethodType(soap*, ...) allocate, set required members
/// - ns5__CanonicalizationMethodType* soap_new_set_ns5__CanonicalizationMethodType(soap*, ...) allocate, set all public members
/// - ns5__CanonicalizationMethodType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__CanonicalizationMethodType(soap*, ns5__CanonicalizationMethodType*) deserialize from a stream
/// - int soap_write_ns5__CanonicalizationMethodType(soap*, ns5__CanonicalizationMethodType*) serialize to a stream
/// - ns5__CanonicalizationMethodType* ns5__CanonicalizationMethodType::soap_dup(soap*) returns deep copy of ns5__CanonicalizationMethodType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__CanonicalizationMethodType::soap_del() deep deletes ns5__CanonicalizationMethodType data members, use only after ns5__CanonicalizationMethodType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__CanonicalizationMethodType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignatureMethodType is a complexType.
///
/// class ns5__SignatureMethodType operations:
/// - ns5__SignatureMethodType* soap_new_ns5__SignatureMethodType(soap*) allocate
/// - ns5__SignatureMethodType* soap_new_ns5__SignatureMethodType(soap*, int num) allocate array
/// - ns5__SignatureMethodType* soap_new_req_ns5__SignatureMethodType(soap*, ...) allocate, set required members
/// - ns5__SignatureMethodType* soap_new_set_ns5__SignatureMethodType(soap*, ...) allocate, set all public members
/// - ns5__SignatureMethodType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__SignatureMethodType(soap*, ns5__SignatureMethodType*) deserialize from a stream
/// - int soap_write_ns5__SignatureMethodType(soap*, ns5__SignatureMethodType*) serialize to a stream
/// - ns5__SignatureMethodType* ns5__SignatureMethodType::soap_dup(soap*) returns deep copy of ns5__SignatureMethodType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignatureMethodType::soap_del() deep deletes ns5__SignatureMethodType data members, use only after ns5__SignatureMethodType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignatureMethodType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":ReferenceType is a complexType.
///
/// class ns5__ReferenceType operations:
/// - ns5__ReferenceType* soap_new_ns5__ReferenceType(soap*) allocate
/// - ns5__ReferenceType* soap_new_ns5__ReferenceType(soap*, int num) allocate array
/// - ns5__ReferenceType* soap_new_req_ns5__ReferenceType(soap*, ...) allocate, set required members
/// - ns5__ReferenceType* soap_new_set_ns5__ReferenceType(soap*, ...) allocate, set all public members
/// - ns5__ReferenceType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__ReferenceType(soap*, ns5__ReferenceType*) deserialize from a stream
/// - int soap_write_ns5__ReferenceType(soap*, ns5__ReferenceType*) serialize to a stream
/// - ns5__ReferenceType* ns5__ReferenceType::soap_dup(soap*) returns deep copy of ns5__ReferenceType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ReferenceType::soap_del() deep deletes ns5__ReferenceType data members, use only after ns5__ReferenceType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ReferenceType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":Transforms.
    ns5__TransformsType*                 ns5__Transforms                1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":DigestMethod.
    ns5__DigestMethodType*               ns5__DigestMethod              1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":DigestValue.
    ns5__DigestValueType*                ns5__DigestValue               1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// Attribute "Type" of XSD type xs:anyURI.
   @xsd__anyURI*                         Type                           0;	///< Optional attribute.
/// Attribute "URI" of XSD type xs:anyURI.
   @xsd__anyURI*                         URI                            0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":TransformsType is a complexType.
///
/// class ns5__TransformsType operations:
/// - ns5__TransformsType* soap_new_ns5__TransformsType(soap*) allocate
/// - ns5__TransformsType* soap_new_ns5__TransformsType(soap*, int num) allocate array
/// - ns5__TransformsType* soap_new_req_ns5__TransformsType(soap*, ...) allocate, set required members
/// - ns5__TransformsType* soap_new_set_ns5__TransformsType(soap*, ...) allocate, set all public members
/// - ns5__TransformsType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__TransformsType(soap*, ns5__TransformsType*) deserialize from a stream
/// - int soap_write_ns5__TransformsType(soap*, ns5__TransformsType*) serialize to a stream
/// - ns5__TransformsType* ns5__TransformsType::soap_dup(soap*) returns deep copy of ns5__TransformsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TransformsType::soap_del() deep deletes ns5__TransformsType data members, use only after ns5__TransformsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TransformsType
{ public:
/// Vector of ns5__TransformType* element refs of length 1..unbounded.
    std::vector<ns5__TransformType*    > ns5__Transform                 1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":TransformType is a complexType.
///
/// class ns5__TransformType operations:
/// - ns5__TransformType* soap_new_ns5__TransformType(soap*) allocate
/// - ns5__TransformType* soap_new_ns5__TransformType(soap*, int num) allocate array
/// - ns5__TransformType* soap_new_req_ns5__TransformType(soap*, ...) allocate, set required members
/// - ns5__TransformType* soap_new_set_ns5__TransformType(soap*, ...) allocate, set all public members
/// - ns5__TransformType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__TransformType(soap*, ns5__TransformType*) deserialize from a stream
/// - int soap_write_ns5__TransformType(soap*, ns5__TransformType*) serialize to a stream
/// - ns5__TransformType* ns5__TransformType::soap_dup(soap*) returns deep copy of ns5__TransformType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TransformType::soap_del() deep deletes ns5__TransformType data members, use only after ns5__TransformType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TransformType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":DigestMethodType is a complexType.
///
/// class ns5__DigestMethodType operations:
/// - ns5__DigestMethodType* soap_new_ns5__DigestMethodType(soap*) allocate
/// - ns5__DigestMethodType* soap_new_ns5__DigestMethodType(soap*, int num) allocate array
/// - ns5__DigestMethodType* soap_new_req_ns5__DigestMethodType(soap*, ...) allocate, set required members
/// - ns5__DigestMethodType* soap_new_set_ns5__DigestMethodType(soap*, ...) allocate, set all public members
/// - ns5__DigestMethodType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__DigestMethodType(soap*, ns5__DigestMethodType*) deserialize from a stream
/// - int soap_write_ns5__DigestMethodType(soap*, ns5__DigestMethodType*) serialize to a stream
/// - ns5__DigestMethodType* ns5__DigestMethodType::soap_dup(soap*) returns deep copy of ns5__DigestMethodType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__DigestMethodType::soap_del() deep deletes ns5__DigestMethodType data members, use only after ns5__DigestMethodType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__DigestMethodType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":KeyInfoType is a complexType.
///
/// class ns5__KeyInfoType operations:
/// - ns5__KeyInfoType* soap_new_ns5__KeyInfoType(soap*) allocate
/// - ns5__KeyInfoType* soap_new_ns5__KeyInfoType(soap*, int num) allocate array
/// - ns5__KeyInfoType* soap_new_req_ns5__KeyInfoType(soap*, ...) allocate, set required members
/// - ns5__KeyInfoType* soap_new_set_ns5__KeyInfoType(soap*, ...) allocate, set all public members
/// - ns5__KeyInfoType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__KeyInfoType(soap*, ns5__KeyInfoType*) deserialize from a stream
/// - int soap_write_ns5__KeyInfoType(soap*, ns5__KeyInfoType*) serialize to a stream
/// - ns5__KeyInfoType* ns5__KeyInfoType::soap_dup(soap*) returns deep copy of ns5__KeyInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__KeyInfoType::soap_del() deep deletes ns5__KeyInfoType data members, use only after ns5__KeyInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__KeyInfoType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":X509Data.
    ns5__X509DataType*                   ns5__X509Data                  1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509DataType is a complexType.
///
/// class ns5__X509DataType operations:
/// - ns5__X509DataType* soap_new_ns5__X509DataType(soap*) allocate
/// - ns5__X509DataType* soap_new_ns5__X509DataType(soap*, int num) allocate array
/// - ns5__X509DataType* soap_new_req_ns5__X509DataType(soap*, ...) allocate, set required members
/// - ns5__X509DataType* soap_new_set_ns5__X509DataType(soap*, ...) allocate, set all public members
/// - ns5__X509DataType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__X509DataType(soap*, ns5__X509DataType*) deserialize from a stream
/// - int soap_write_ns5__X509DataType(soap*, ns5__X509DataType*) serialize to a stream
/// - ns5__X509DataType* ns5__X509DataType::soap_dup(soap*) returns deep copy of ns5__X509DataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__X509DataType::soap_del() deep deletes ns5__X509DataType data members, use only after ns5__X509DataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__X509DataType
{ public:
/// Vector of ns5__X509CertificateType* element refs of length 1..unbounded.
    std::vector<ns5__X509CertificateType*> ns5__X509Certificate           1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":ObjectType is a complexType.
///
/// class ns5__ObjectType operations:
/// - ns5__ObjectType* soap_new_ns5__ObjectType(soap*) allocate
/// - ns5__ObjectType* soap_new_ns5__ObjectType(soap*, int num) allocate array
/// - ns5__ObjectType* soap_new_req_ns5__ObjectType(soap*, ...) allocate, set required members
/// - ns5__ObjectType* soap_new_set_ns5__ObjectType(soap*, ...) allocate, set all public members
/// - ns5__ObjectType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__ObjectType(soap*, ns5__ObjectType*) deserialize from a stream
/// - int soap_write_ns5__ObjectType(soap*, ns5__ObjectType*) serialize to a stream
/// - ns5__ObjectType* ns5__ObjectType::soap_dup(soap*) returns deep copy of ns5__ObjectType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ObjectType::soap_del() deep deletes ns5__ObjectType data members, use only after ns5__ObjectType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ObjectType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ObjectType            ;	///< Union _ns5__union_ObjectType selector: set to SOAP_UNION__ns5__union_ObjectType_<fieldname>
/// Union for choice in ns5__ObjectType.
    union _ns5__union_ObjectType
    {
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://uri.etsi.org/01903/v1.3.2#":QualifyingProperties.
    ns1__QualifyingPropertiesType*       ns1__QualifyingProperties      0;	///< Optional element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGList.
    ns7__SVGListType*                    ns7__SVGList                   0;	///< Optional element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":Attribute.
    ns3__AttributeType*                  ns3__Attribute                 0;	///< Optional element.
    }                                    union_ObjectType              ;
//  END OF CHOICE
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeType is a complexType.
///
/// class ns3__AttributeType operations:
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*) allocate
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*, int num) allocate array
/// - ns3__AttributeType* soap_new_req_ns3__AttributeType(soap*, ...) allocate, set required members
/// - ns3__AttributeType* soap_new_set_ns3__AttributeType(soap*, ...) allocate, set all public members
/// - ns3__AttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__AttributeType(soap*, ns3__AttributeType*) deserialize from a stream
/// - int soap_write_ns3__AttributeType(soap*, ns3__AttributeType*) serialize to a stream
/// - ns3__AttributeType* ns3__AttributeType::soap_dup(soap*) returns deep copy of ns3__AttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeType::soap_del() deep deletes ns3__AttributeType data members, use only after ns3__AttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeType
{ public:
/// Element "AttributeSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          AttributeSupplier              1;	///< Required element.
/// Element "Date" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DateType.
    ns4__DateType                        Date                           1;	///< Required element.
/// Element "Validity" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ValidityType.
    ns4__ValidityType                    Validity                       1;	///< Required element.
/// Element "PersonalData" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               PersonalData                   1;	///< Required element.
/// Element "MainAttribute" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":MainAttributeType.
    ns3__MainAttributeType*              MainAttribute                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType is a complexType.
///
/// class ns3__AttributeSupplierType operations:
/// - ns3__AttributeSupplierType* soap_new_ns3__AttributeSupplierType(soap*) allocate
/// - ns3__AttributeSupplierType* soap_new_ns3__AttributeSupplierType(soap*, int num) allocate array
/// - ns3__AttributeSupplierType* soap_new_req_ns3__AttributeSupplierType(soap*, ...) allocate, set required members
/// - ns3__AttributeSupplierType* soap_new_set_ns3__AttributeSupplierType(soap*, ...) allocate, set all public members
/// - ns3__AttributeSupplierType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__AttributeSupplierType(soap*, ns3__AttributeSupplierType*) deserialize from a stream
/// - int soap_write_ns3__AttributeSupplierType(soap*, ns3__AttributeSupplierType*) serialize to a stream
/// - ns3__AttributeSupplierType* ns3__AttributeSupplierType::soap_dup(soap*) returns deep copy of ns3__AttributeSupplierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeSupplierType::soap_del() deep deletes ns3__AttributeSupplierType data members, use only after ns3__AttributeSupplierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeSupplierType
{ public:
/// Element "Id" of XSD type xs:anyURI.
    xsd__anyURI                          Id                             1;	///< Required element.
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType is a complexType.
///
/// class ns3__PersonalDataType operations:
/// - ns3__PersonalDataType* soap_new_ns3__PersonalDataType(soap*) allocate
/// - ns3__PersonalDataType* soap_new_ns3__PersonalDataType(soap*, int num) allocate array
/// - ns3__PersonalDataType* soap_new_req_ns3__PersonalDataType(soap*, ...) allocate, set required members
/// - ns3__PersonalDataType* soap_new_set_ns3__PersonalDataType(soap*, ...) allocate, set all public members
/// - ns3__PersonalDataType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__PersonalDataType(soap*, ns3__PersonalDataType*) deserialize from a stream
/// - int soap_write_ns3__PersonalDataType(soap*, ns3__PersonalDataType*) serialize to a stream
/// - ns3__PersonalDataType* ns3__PersonalDataType::soap_dup(soap*) returns deep copy of ns3__PersonalDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PersonalDataType::soap_del() deep deletes ns3__PersonalDataType data members, use only after ns3__PersonalDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PersonalDataType
{ public:
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// Element "NIC" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NICType.
    ns4__NICType                         NIC                            1;	///< Required element.
/// Element "ExtraIDList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDListType.
    ns3__ExtraIDListType*                ExtraIDList                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDListType is a complexType.
///
/// class ns3__ExtraIDListType operations:
/// - ns3__ExtraIDListType* soap_new_ns3__ExtraIDListType(soap*) allocate
/// - ns3__ExtraIDListType* soap_new_ns3__ExtraIDListType(soap*, int num) allocate array
/// - ns3__ExtraIDListType* soap_new_req_ns3__ExtraIDListType(soap*, ...) allocate, set required members
/// - ns3__ExtraIDListType* soap_new_set_ns3__ExtraIDListType(soap*, ...) allocate, set all public members
/// - ns3__ExtraIDListType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__ExtraIDListType(soap*, ns3__ExtraIDListType*) deserialize from a stream
/// - int soap_write_ns3__ExtraIDListType(soap*, ns3__ExtraIDListType*) serialize to a stream
/// - ns3__ExtraIDListType* ns3__ExtraIDListType::soap_dup(soap*) returns deep copy of ns3__ExtraIDListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExtraIDListType::soap_del() deep deletes ns3__ExtraIDListType data members, use only after ns3__ExtraIDListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExtraIDListType
{ public:
/// Vector of ns3__ExtraIDType* of length 1..unbounded.
    std::vector<ns3__ExtraIDType*      > ExtraID                        1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDType is a complexType.
///
/// class ns3__ExtraIDType operations:
/// - ns3__ExtraIDType* soap_new_ns3__ExtraIDType(soap*) allocate
/// - ns3__ExtraIDType* soap_new_ns3__ExtraIDType(soap*, int num) allocate array
/// - ns3__ExtraIDType* soap_new_req_ns3__ExtraIDType(soap*, ...) allocate, set required members
/// - ns3__ExtraIDType* soap_new_set_ns3__ExtraIDType(soap*, ...) allocate, set all public members
/// - ns3__ExtraIDType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__ExtraIDType(soap*, ns3__ExtraIDType*) deserialize from a stream
/// - int soap_write_ns3__ExtraIDType(soap*, ns3__ExtraIDType*) serialize to a stream
/// - ns3__ExtraIDType* ns3__ExtraIDType::soap_dup(soap*) returns deep copy of ns3__ExtraIDType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExtraIDType::soap_del() deep deletes ns3__ExtraIDType data members, use only after ns3__ExtraIDType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExtraIDType
{ public:
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// Element "Value" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ExtraIDValueType.
    ns4__ExtraIDValueType                Value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":MainAttributeType is a complexType.
///
/// class ns3__MainAttributeType operations:
/// - ns3__MainAttributeType* soap_new_ns3__MainAttributeType(soap*) allocate
/// - ns3__MainAttributeType* soap_new_ns3__MainAttributeType(soap*, int num) allocate array
/// - ns3__MainAttributeType* soap_new_req_ns3__MainAttributeType(soap*, ...) allocate, set required members
/// - ns3__MainAttributeType* soap_new_set_ns3__MainAttributeType(soap*, ...) allocate, set all public members
/// - ns3__MainAttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__MainAttributeType(soap*, ns3__MainAttributeType*) deserialize from a stream
/// - int soap_write_ns3__MainAttributeType(soap*, ns3__MainAttributeType*) serialize to a stream
/// - ns3__MainAttributeType* ns3__MainAttributeType::soap_dup(soap*) returns deep copy of ns3__MainAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MainAttributeType::soap_del() deep deletes ns3__MainAttributeType data members, use only after ns3__MainAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MainAttributeType
{ public:
/// Element "AttributeID" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType.
    ns4__AttributeIDType                 AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType.
    ns4__DescriptionType*                Description                    0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType.
    ns3__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "SubAttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeListType.
    ns3__SubAttributeListType*           SubAttributeList               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType is a complexType.
///
/// class ns3__LegalActListType operations:
/// - ns3__LegalActListType* soap_new_ns3__LegalActListType(soap*) allocate
/// - ns3__LegalActListType* soap_new_ns3__LegalActListType(soap*, int num) allocate array
/// - ns3__LegalActListType* soap_new_req_ns3__LegalActListType(soap*, ...) allocate, set required members
/// - ns3__LegalActListType* soap_new_set_ns3__LegalActListType(soap*, ...) allocate, set all public members
/// - ns3__LegalActListType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__LegalActListType(soap*, ns3__LegalActListType*) deserialize from a stream
/// - int soap_write_ns3__LegalActListType(soap*, ns3__LegalActListType*) serialize to a stream
/// - ns3__LegalActListType* ns3__LegalActListType::soap_dup(soap*) returns deep copy of ns3__LegalActListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__LegalActListType::soap_del() deep deletes ns3__LegalActListType data members, use only after ns3__LegalActListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__LegalActListType
{ public:
/// Vector of ns4__LegalActType of length 1..unbounded.
    std::vector<ns4__LegalActType      > LegalAct                       1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeListType is a complexType.
///
/// class ns3__SubAttributeListType operations:
/// - ns3__SubAttributeListType* soap_new_ns3__SubAttributeListType(soap*) allocate
/// - ns3__SubAttributeListType* soap_new_ns3__SubAttributeListType(soap*, int num) allocate array
/// - ns3__SubAttributeListType* soap_new_req_ns3__SubAttributeListType(soap*, ...) allocate, set required members
/// - ns3__SubAttributeListType* soap_new_set_ns3__SubAttributeListType(soap*, ...) allocate, set all public members
/// - ns3__SubAttributeListType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__SubAttributeListType(soap*, ns3__SubAttributeListType*) deserialize from a stream
/// - int soap_write_ns3__SubAttributeListType(soap*, ns3__SubAttributeListType*) serialize to a stream
/// - ns3__SubAttributeListType* ns3__SubAttributeListType::soap_dup(soap*) returns deep copy of ns3__SubAttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubAttributeListType::soap_del() deep deletes ns3__SubAttributeListType data members, use only after ns3__SubAttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubAttributeListType
{ public:
/// Vector of ns3__SubAttributeType* of length 1..unbounded.
    std::vector<ns3__SubAttributeType* > SubAttribute                   1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeType is a complexType.
///
/// class ns3__SubAttributeType operations:
/// - ns3__SubAttributeType* soap_new_ns3__SubAttributeType(soap*) allocate
/// - ns3__SubAttributeType* soap_new_ns3__SubAttributeType(soap*, int num) allocate array
/// - ns3__SubAttributeType* soap_new_req_ns3__SubAttributeType(soap*, ...) allocate, set required members
/// - ns3__SubAttributeType* soap_new_set_ns3__SubAttributeType(soap*, ...) allocate, set all public members
/// - ns3__SubAttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__SubAttributeType(soap*, ns3__SubAttributeType*) deserialize from a stream
/// - int soap_write_ns3__SubAttributeType(soap*, ns3__SubAttributeType*) serialize to a stream
/// - ns3__SubAttributeType* ns3__SubAttributeType::soap_dup(soap*) returns deep copy of ns3__SubAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubAttributeType::soap_del() deep deletes ns3__SubAttributeType data members, use only after ns3__SubAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubAttributeType
{ public:
/// Element "AttributeID" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType.
    ns4__AttributeIDType                 AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType.
    ns4__DescriptionType*                Description                    0;	///< Optional element.
/// Element "Value" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":SubAttributeValueType.
    ns4__SubAttributeValueType*          Value                          0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType.
    ns3__LegalActListType*               LegalActList                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ResponseCodeStatusType is a complexType.
///
/// class ns3__ResponseCodeStatusType operations:
/// - ns3__ResponseCodeStatusType* soap_new_ns3__ResponseCodeStatusType(soap*) allocate
/// - ns3__ResponseCodeStatusType* soap_new_ns3__ResponseCodeStatusType(soap*, int num) allocate array
/// - ns3__ResponseCodeStatusType* soap_new_req_ns3__ResponseCodeStatusType(soap*, ...) allocate, set required members
/// - ns3__ResponseCodeStatusType* soap_new_set_ns3__ResponseCodeStatusType(soap*, ...) allocate, set all public members
/// - ns3__ResponseCodeStatusType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__ResponseCodeStatusType(soap*, ns3__ResponseCodeStatusType*) deserialize from a stream
/// - int soap_write_ns3__ResponseCodeStatusType(soap*, ns3__ResponseCodeStatusType*) serialize to a stream
/// - ns3__ResponseCodeStatusType* ns3__ResponseCodeStatusType::soap_dup(soap*) returns deep copy of ns3__ResponseCodeStatusType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ResponseCodeStatusType::soap_del() deep deletes ns3__ResponseCodeStatusType data members, use only after ns3__ResponseCodeStatusType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ResponseCodeStatusType
{ public:
/// Element "Code" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeType.
    ns4__ResponseCodeType                Code                           1;	///< Required element.
/// Element "Message" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeMessage.
    ns4__ResponseCodeMessage*            Message                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://uri.etsi.org/01903/v1.3.2#":QualifyingPropertiesType is a complexType.
///
/// class ns1__QualifyingPropertiesType operations:
/// - ns1__QualifyingPropertiesType* soap_new_ns1__QualifyingPropertiesType(soap*) allocate
/// - ns1__QualifyingPropertiesType* soap_new_ns1__QualifyingPropertiesType(soap*, int num) allocate array
/// - ns1__QualifyingPropertiesType* soap_new_req_ns1__QualifyingPropertiesType(soap*, ...) allocate, set required members
/// - ns1__QualifyingPropertiesType* soap_new_set_ns1__QualifyingPropertiesType(soap*, ...) allocate, set all public members
/// - ns1__QualifyingPropertiesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__QualifyingPropertiesType(soap*, ns1__QualifyingPropertiesType*) deserialize from a stream
/// - int soap_write_ns1__QualifyingPropertiesType(soap*, ns1__QualifyingPropertiesType*) serialize to a stream
/// - ns1__QualifyingPropertiesType* ns1__QualifyingPropertiesType::soap_dup(soap*) returns deep copy of ns1__QualifyingPropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__QualifyingPropertiesType::soap_del() deep deletes ns1__QualifyingPropertiesType data members, use only after ns1__QualifyingPropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__QualifyingPropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignedProperties.
    ns1__SignedPropertiesType*           ns1__SignedProperties          1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":UnsignedProperties.
    ns1__UnsignedPropertiesType*         ns1__UnsignedProperties        0;	///< Optional element.
/// Attribute "Target" of XSD type xs:anyURI.
   @xsd__anyURI                          Target                         1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignedPropertiesType is a complexType.
///
/// class ns1__SignedPropertiesType operations:
/// - ns1__SignedPropertiesType* soap_new_ns1__SignedPropertiesType(soap*) allocate
/// - ns1__SignedPropertiesType* soap_new_ns1__SignedPropertiesType(soap*, int num) allocate array
/// - ns1__SignedPropertiesType* soap_new_req_ns1__SignedPropertiesType(soap*, ...) allocate, set required members
/// - ns1__SignedPropertiesType* soap_new_set_ns1__SignedPropertiesType(soap*, ...) allocate, set all public members
/// - ns1__SignedPropertiesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SignedPropertiesType(soap*, ns1__SignedPropertiesType*) deserialize from a stream
/// - int soap_write_ns1__SignedPropertiesType(soap*, ns1__SignedPropertiesType*) serialize to a stream
/// - ns1__SignedPropertiesType* ns1__SignedPropertiesType::soap_dup(soap*) returns deep copy of ns1__SignedPropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SignedPropertiesType::soap_del() deep deletes ns1__SignedPropertiesType data members, use only after ns1__SignedPropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SignedPropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignedSignatureProperties.
    ns1__SignedSignaturePropertiesType*  ns1__SignedSignatureProperties 1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignedSignaturePropertiesType is a complexType.
///
/// class ns1__SignedSignaturePropertiesType operations:
/// - ns1__SignedSignaturePropertiesType* soap_new_ns1__SignedSignaturePropertiesType(soap*) allocate
/// - ns1__SignedSignaturePropertiesType* soap_new_ns1__SignedSignaturePropertiesType(soap*, int num) allocate array
/// - ns1__SignedSignaturePropertiesType* soap_new_req_ns1__SignedSignaturePropertiesType(soap*, ...) allocate, set required members
/// - ns1__SignedSignaturePropertiesType* soap_new_set_ns1__SignedSignaturePropertiesType(soap*, ...) allocate, set all public members
/// - ns1__SignedSignaturePropertiesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SignedSignaturePropertiesType(soap*, ns1__SignedSignaturePropertiesType*) deserialize from a stream
/// - int soap_write_ns1__SignedSignaturePropertiesType(soap*, ns1__SignedSignaturePropertiesType*) serialize to a stream
/// - ns1__SignedSignaturePropertiesType* ns1__SignedSignaturePropertiesType::soap_dup(soap*) returns deep copy of ns1__SignedSignaturePropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SignedSignaturePropertiesType::soap_del() deep deletes ns1__SignedSignaturePropertiesType data members, use only after ns1__SignedSignaturePropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SignedSignaturePropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SigningTime.
    ns1__SigningTimeType                 ns1__SigningTime               1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SigningCertificate.
    ns1__SigningCertificateType*         ns1__SigningCertificate        1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignerRole.
    ns1__SignerRoleType*                 ns1__SignerRole                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SigningCertificateType is a complexType.
///
/// class ns1__SigningCertificateType operations:
/// - ns1__SigningCertificateType* soap_new_ns1__SigningCertificateType(soap*) allocate
/// - ns1__SigningCertificateType* soap_new_ns1__SigningCertificateType(soap*, int num) allocate array
/// - ns1__SigningCertificateType* soap_new_req_ns1__SigningCertificateType(soap*, ...) allocate, set required members
/// - ns1__SigningCertificateType* soap_new_set_ns1__SigningCertificateType(soap*, ...) allocate, set all public members
/// - ns1__SigningCertificateType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SigningCertificateType(soap*, ns1__SigningCertificateType*) deserialize from a stream
/// - int soap_write_ns1__SigningCertificateType(soap*, ns1__SigningCertificateType*) serialize to a stream
/// - ns1__SigningCertificateType* ns1__SigningCertificateType::soap_dup(soap*) returns deep copy of ns1__SigningCertificateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SigningCertificateType::soap_del() deep deletes ns1__SigningCertificateType data members, use only after ns1__SigningCertificateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SigningCertificateType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":Cert.
    ns1__CertType*                       ns1__Cert                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertType is a complexType.
///
/// class ns1__CertType operations:
/// - ns1__CertType* soap_new_ns1__CertType(soap*) allocate
/// - ns1__CertType* soap_new_ns1__CertType(soap*, int num) allocate array
/// - ns1__CertType* soap_new_req_ns1__CertType(soap*, ...) allocate, set required members
/// - ns1__CertType* soap_new_set_ns1__CertType(soap*, ...) allocate, set all public members
/// - ns1__CertType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CertType(soap*, ns1__CertType*) deserialize from a stream
/// - int soap_write_ns1__CertType(soap*, ns1__CertType*) serialize to a stream
/// - ns1__CertType* ns1__CertType::soap_dup(soap*) returns deep copy of ns1__CertType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CertType::soap_del() deep deletes ns1__CertType data members, use only after ns1__CertType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CertType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CertDigest.
    ns1__CertDigestType*                 ns1__CertDigest                1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":IssuerSerial.
    ns1__IssuerSerialType*               ns1__IssuerSerial              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertDigestType is a complexType.
///
/// class ns1__CertDigestType operations:
/// - ns1__CertDigestType* soap_new_ns1__CertDigestType(soap*) allocate
/// - ns1__CertDigestType* soap_new_ns1__CertDigestType(soap*, int num) allocate array
/// - ns1__CertDigestType* soap_new_req_ns1__CertDigestType(soap*, ...) allocate, set required members
/// - ns1__CertDigestType* soap_new_set_ns1__CertDigestType(soap*, ...) allocate, set all public members
/// - ns1__CertDigestType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CertDigestType(soap*, ns1__CertDigestType*) deserialize from a stream
/// - int soap_write_ns1__CertDigestType(soap*, ns1__CertDigestType*) serialize to a stream
/// - ns1__CertDigestType* ns1__CertDigestType::soap_dup(soap*) returns deep copy of ns1__CertDigestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CertDigestType::soap_del() deep deletes ns1__CertDigestType data members, use only after ns1__CertDigestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CertDigestType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestMethod.
    ns5__DigestMethodType*               ns5__DigestMethod              1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestValue.
    ns5__DigestValueType*                ns5__DigestValue               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":IssuerSerialType is a complexType.
///
/// class ns1__IssuerSerialType operations:
/// - ns1__IssuerSerialType* soap_new_ns1__IssuerSerialType(soap*) allocate
/// - ns1__IssuerSerialType* soap_new_ns1__IssuerSerialType(soap*, int num) allocate array
/// - ns1__IssuerSerialType* soap_new_req_ns1__IssuerSerialType(soap*, ...) allocate, set required members
/// - ns1__IssuerSerialType* soap_new_set_ns1__IssuerSerialType(soap*, ...) allocate, set all public members
/// - ns1__IssuerSerialType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__IssuerSerialType(soap*, ns1__IssuerSerialType*) deserialize from a stream
/// - int soap_write_ns1__IssuerSerialType(soap*, ns1__IssuerSerialType*) serialize to a stream
/// - ns1__IssuerSerialType* ns1__IssuerSerialType::soap_dup(soap*) returns deep copy of ns1__IssuerSerialType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__IssuerSerialType::soap_del() deep deletes ns1__IssuerSerialType data members, use only after ns1__IssuerSerialType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__IssuerSerialType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":X509IssuerName.
    ns5__X509IssuerNameType              ns5__X509IssuerName            1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":X509SerialNumber.
    ns5__X509SerialNumberType            ns5__X509SerialNumber          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignerRoleType is a complexType.
///
/// class ns1__SignerRoleType operations:
/// - ns1__SignerRoleType* soap_new_ns1__SignerRoleType(soap*) allocate
/// - ns1__SignerRoleType* soap_new_ns1__SignerRoleType(soap*, int num) allocate array
/// - ns1__SignerRoleType* soap_new_req_ns1__SignerRoleType(soap*, ...) allocate, set required members
/// - ns1__SignerRoleType* soap_new_set_ns1__SignerRoleType(soap*, ...) allocate, set all public members
/// - ns1__SignerRoleType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SignerRoleType(soap*, ns1__SignerRoleType*) deserialize from a stream
/// - int soap_write_ns1__SignerRoleType(soap*, ns1__SignerRoleType*) serialize to a stream
/// - ns1__SignerRoleType* ns1__SignerRoleType::soap_dup(soap*) returns deep copy of ns1__SignerRoleType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SignerRoleType::soap_del() deep deletes ns1__SignerRoleType data members, use only after ns1__SignerRoleType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SignerRoleType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ClaimedRoles.
    ns1__ClaimedRolesListType*           ns1__ClaimedRoles              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ClaimedRolesListType is a complexType.
///
/// class ns1__ClaimedRolesListType operations:
/// - ns1__ClaimedRolesListType* soap_new_ns1__ClaimedRolesListType(soap*) allocate
/// - ns1__ClaimedRolesListType* soap_new_ns1__ClaimedRolesListType(soap*, int num) allocate array
/// - ns1__ClaimedRolesListType* soap_new_req_ns1__ClaimedRolesListType(soap*, ...) allocate, set required members
/// - ns1__ClaimedRolesListType* soap_new_set_ns1__ClaimedRolesListType(soap*, ...) allocate, set all public members
/// - ns1__ClaimedRolesListType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ClaimedRolesListType(soap*, ns1__ClaimedRolesListType*) deserialize from a stream
/// - int soap_write_ns1__ClaimedRolesListType(soap*, ns1__ClaimedRolesListType*) serialize to a stream
/// - ns1__ClaimedRolesListType* ns1__ClaimedRolesListType::soap_dup(soap*) returns deep copy of ns1__ClaimedRolesListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ClaimedRolesListType::soap_del() deep deletes ns1__ClaimedRolesListType data members, use only after ns1__ClaimedRolesListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ClaimedRolesListType
{ public:
/// Vector of ns1__ClaimedRoleType* element refs of length 1..unbounded.
    std::vector<ns1__ClaimedRoleType*  > ns1__ClaimedRole               1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ClaimedRoleType is a complexType.
///
/// class ns1__ClaimedRoleType operations:
/// - ns1__ClaimedRoleType* soap_new_ns1__ClaimedRoleType(soap*) allocate
/// - ns1__ClaimedRoleType* soap_new_ns1__ClaimedRoleType(soap*, int num) allocate array
/// - ns1__ClaimedRoleType* soap_new_req_ns1__ClaimedRoleType(soap*, ...) allocate, set required members
/// - ns1__ClaimedRoleType* soap_new_set_ns1__ClaimedRoleType(soap*, ...) allocate, set all public members
/// - ns1__ClaimedRoleType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ClaimedRoleType(soap*, ns1__ClaimedRoleType*) deserialize from a stream
/// - int soap_write_ns1__ClaimedRoleType(soap*, ns1__ClaimedRoleType*) serialize to a stream
/// - ns1__ClaimedRoleType* ns1__ClaimedRoleType::soap_dup(soap*) returns deep copy of ns1__ClaimedRoleType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ClaimedRoleType::soap_del() deep deletes ns1__ClaimedRoleType data members, use only after ns1__ClaimedRoleType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ClaimedRoleType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SignatureAttribute.
    ns5__SignatureType*                  ns3__SignatureAttribute        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":UnsignedPropertiesType is a complexType.
///
/// class ns1__UnsignedPropertiesType operations:
/// - ns1__UnsignedPropertiesType* soap_new_ns1__UnsignedPropertiesType(soap*) allocate
/// - ns1__UnsignedPropertiesType* soap_new_ns1__UnsignedPropertiesType(soap*, int num) allocate array
/// - ns1__UnsignedPropertiesType* soap_new_req_ns1__UnsignedPropertiesType(soap*, ...) allocate, set required members
/// - ns1__UnsignedPropertiesType* soap_new_set_ns1__UnsignedPropertiesType(soap*, ...) allocate, set all public members
/// - ns1__UnsignedPropertiesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__UnsignedPropertiesType(soap*, ns1__UnsignedPropertiesType*) deserialize from a stream
/// - int soap_write_ns1__UnsignedPropertiesType(soap*, ns1__UnsignedPropertiesType*) serialize to a stream
/// - ns1__UnsignedPropertiesType* ns1__UnsignedPropertiesType::soap_dup(soap*) returns deep copy of ns1__UnsignedPropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UnsignedPropertiesType::soap_del() deep deletes ns1__UnsignedPropertiesType data members, use only after ns1__UnsignedPropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UnsignedPropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":UnsignedSignatureProperties.
    ns1__UnsignedSignaturePropertiesType*  ns1__UnsignedSignatureProperties 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":UnsignedSignaturePropertiesType is a complexType.
///
/// class ns1__UnsignedSignaturePropertiesType operations:
/// - ns1__UnsignedSignaturePropertiesType* soap_new_ns1__UnsignedSignaturePropertiesType(soap*) allocate
/// - ns1__UnsignedSignaturePropertiesType* soap_new_ns1__UnsignedSignaturePropertiesType(soap*, int num) allocate array
/// - ns1__UnsignedSignaturePropertiesType* soap_new_req_ns1__UnsignedSignaturePropertiesType(soap*, ...) allocate, set required members
/// - ns1__UnsignedSignaturePropertiesType* soap_new_set_ns1__UnsignedSignaturePropertiesType(soap*, ...) allocate, set all public members
/// - ns1__UnsignedSignaturePropertiesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__UnsignedSignaturePropertiesType(soap*, ns1__UnsignedSignaturePropertiesType*) deserialize from a stream
/// - int soap_write_ns1__UnsignedSignaturePropertiesType(soap*, ns1__UnsignedSignaturePropertiesType*) serialize to a stream
/// - ns1__UnsignedSignaturePropertiesType* ns1__UnsignedSignaturePropertiesType::soap_dup(soap*) returns deep copy of ns1__UnsignedSignaturePropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__UnsignedSignaturePropertiesType::soap_del() deep deletes ns1__UnsignedSignaturePropertiesType data members, use only after ns1__UnsignedSignaturePropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__UnsignedSignaturePropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CounterSignature.
    ns1__CounterSignatureType*           ns1__CounterSignature          0;	///< Optional element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStamp.
    ns1__SignatureTimeStampType*         ns1__SignatureTimeStamp        1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefs.
    ns1__CompleteCertificateRefsType*    ns1__CompleteCertificateRefs   1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefs.
    ns1__CompleteRevocationRefsType*     ns1__CompleteRevocationRefs    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStamp.
    ns1__SigAndRefsTimeStampType*        ns1__SigAndRefsTimeStamp       1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CertificateValues.
    ns1__CertificateValuesType*          ns1__CertificateValues         1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":RevocationValues.
    ns1__RevocationValuesType*           ns1__RevocationValues          1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStamp.
    ns1__ArchiveTimeStampType*           ns1__ArchiveTimeStamp          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CounterSignatureType is a complexType.
///
/// class ns1__CounterSignatureType operations:
/// - ns1__CounterSignatureType* soap_new_ns1__CounterSignatureType(soap*) allocate
/// - ns1__CounterSignatureType* soap_new_ns1__CounterSignatureType(soap*, int num) allocate array
/// - ns1__CounterSignatureType* soap_new_req_ns1__CounterSignatureType(soap*, ...) allocate, set required members
/// - ns1__CounterSignatureType* soap_new_set_ns1__CounterSignatureType(soap*, ...) allocate, set all public members
/// - ns1__CounterSignatureType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CounterSignatureType(soap*, ns1__CounterSignatureType*) deserialize from a stream
/// - int soap_write_ns1__CounterSignatureType(soap*, ns1__CounterSignatureType*) serialize to a stream
/// - ns1__CounterSignatureType* ns1__CounterSignatureType::soap_dup(soap*) returns deep copy of ns1__CounterSignatureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CounterSignatureType::soap_del() deep deletes ns1__CounterSignatureType data members, use only after ns1__CounterSignatureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CounterSignatureType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":Signature.
    ns5__SignatureType*                  ns5__Signature                 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStampType is a complexType.
///
/// class ns1__SignatureTimeStampType operations:
/// - ns1__SignatureTimeStampType* soap_new_ns1__SignatureTimeStampType(soap*) allocate
/// - ns1__SignatureTimeStampType* soap_new_ns1__SignatureTimeStampType(soap*, int num) allocate array
/// - ns1__SignatureTimeStampType* soap_new_req_ns1__SignatureTimeStampType(soap*, ...) allocate, set required members
/// - ns1__SignatureTimeStampType* soap_new_set_ns1__SignatureTimeStampType(soap*, ...) allocate, set all public members
/// - ns1__SignatureTimeStampType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SignatureTimeStampType(soap*, ns1__SignatureTimeStampType*) deserialize from a stream
/// - int soap_write_ns1__SignatureTimeStampType(soap*, ns1__SignatureTimeStampType*) serialize to a stream
/// - ns1__SignatureTimeStampType* ns1__SignatureTimeStampType::soap_dup(soap*) returns deep copy of ns1__SignatureTimeStampType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SignatureTimeStampType::soap_del() deep deletes ns1__SignatureTimeStampType data members, use only after ns1__SignatureTimeStampType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SignatureTimeStampType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp.
    ns1__EncapsulatedTimeStampType       ns1__EncapsulatedTimeStamp     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefsType is a complexType.
///
/// class ns1__CompleteCertificateRefsType operations:
/// - ns1__CompleteCertificateRefsType* soap_new_ns1__CompleteCertificateRefsType(soap*) allocate
/// - ns1__CompleteCertificateRefsType* soap_new_ns1__CompleteCertificateRefsType(soap*, int num) allocate array
/// - ns1__CompleteCertificateRefsType* soap_new_req_ns1__CompleteCertificateRefsType(soap*, ...) allocate, set required members
/// - ns1__CompleteCertificateRefsType* soap_new_set_ns1__CompleteCertificateRefsType(soap*, ...) allocate, set all public members
/// - ns1__CompleteCertificateRefsType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CompleteCertificateRefsType(soap*, ns1__CompleteCertificateRefsType*) deserialize from a stream
/// - int soap_write_ns1__CompleteCertificateRefsType(soap*, ns1__CompleteCertificateRefsType*) serialize to a stream
/// - ns1__CompleteCertificateRefsType* ns1__CompleteCertificateRefsType::soap_dup(soap*) returns deep copy of ns1__CompleteCertificateRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CompleteCertificateRefsType::soap_del() deep deletes ns1__CompleteCertificateRefsType data members, use only after ns1__CompleteCertificateRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CompleteCertificateRefsType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CertRefs.
    ns1__CertRefsType*                   ns1__CertRefs                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertRefsType is a complexType.
///
/// class ns1__CertRefsType operations:
/// - ns1__CertRefsType* soap_new_ns1__CertRefsType(soap*) allocate
/// - ns1__CertRefsType* soap_new_ns1__CertRefsType(soap*, int num) allocate array
/// - ns1__CertRefsType* soap_new_req_ns1__CertRefsType(soap*, ...) allocate, set required members
/// - ns1__CertRefsType* soap_new_set_ns1__CertRefsType(soap*, ...) allocate, set all public members
/// - ns1__CertRefsType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CertRefsType(soap*, ns1__CertRefsType*) deserialize from a stream
/// - int soap_write_ns1__CertRefsType(soap*, ns1__CertRefsType*) serialize to a stream
/// - ns1__CertRefsType* ns1__CertRefsType::soap_dup(soap*) returns deep copy of ns1__CertRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CertRefsType::soap_del() deep deletes ns1__CertRefsType data members, use only after ns1__CertRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CertRefsType
{ public:
/// Vector of ns1__CertType* element refs of length 1..unbounded.
    std::vector<ns1__CertType*         > ns1__Cert                      1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefsType is a complexType.
///
/// class ns1__CompleteRevocationRefsType operations:
/// - ns1__CompleteRevocationRefsType* soap_new_ns1__CompleteRevocationRefsType(soap*) allocate
/// - ns1__CompleteRevocationRefsType* soap_new_ns1__CompleteRevocationRefsType(soap*, int num) allocate array
/// - ns1__CompleteRevocationRefsType* soap_new_req_ns1__CompleteRevocationRefsType(soap*, ...) allocate, set required members
/// - ns1__CompleteRevocationRefsType* soap_new_set_ns1__CompleteRevocationRefsType(soap*, ...) allocate, set all public members
/// - ns1__CompleteRevocationRefsType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CompleteRevocationRefsType(soap*, ns1__CompleteRevocationRefsType*) deserialize from a stream
/// - int soap_write_ns1__CompleteRevocationRefsType(soap*, ns1__CompleteRevocationRefsType*) serialize to a stream
/// - ns1__CompleteRevocationRefsType* ns1__CompleteRevocationRefsType::soap_dup(soap*) returns deep copy of ns1__CompleteRevocationRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CompleteRevocationRefsType::soap_del() deep deletes ns1__CompleteRevocationRefsType data members, use only after ns1__CompleteRevocationRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CompleteRevocationRefsType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CRLRefs.
    ns1__CRLRefsType*                    ns1__CRLRefs                   1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":OCSPRefs.
    ns1__OCSPRefsType*                   ns1__OCSPRefs                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLRefsType is a complexType.
///
/// class ns1__CRLRefsType operations:
/// - ns1__CRLRefsType* soap_new_ns1__CRLRefsType(soap*) allocate
/// - ns1__CRLRefsType* soap_new_ns1__CRLRefsType(soap*, int num) allocate array
/// - ns1__CRLRefsType* soap_new_req_ns1__CRLRefsType(soap*, ...) allocate, set required members
/// - ns1__CRLRefsType* soap_new_set_ns1__CRLRefsType(soap*, ...) allocate, set all public members
/// - ns1__CRLRefsType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CRLRefsType(soap*, ns1__CRLRefsType*) deserialize from a stream
/// - int soap_write_ns1__CRLRefsType(soap*, ns1__CRLRefsType*) serialize to a stream
/// - ns1__CRLRefsType* ns1__CRLRefsType::soap_dup(soap*) returns deep copy of ns1__CRLRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CRLRefsType::soap_del() deep deletes ns1__CRLRefsType data members, use only after ns1__CRLRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CRLRefsType
{ public:
/// Vector of ns1__CRLRefType* element refs of length 1..unbounded.
    std::vector<ns1__CRLRefType*       > ns1__CRLRef                    1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLRefType is a complexType.
///
/// class ns1__CRLRefType operations:
/// - ns1__CRLRefType* soap_new_ns1__CRLRefType(soap*) allocate
/// - ns1__CRLRefType* soap_new_ns1__CRLRefType(soap*, int num) allocate array
/// - ns1__CRLRefType* soap_new_req_ns1__CRLRefType(soap*, ...) allocate, set required members
/// - ns1__CRLRefType* soap_new_set_ns1__CRLRefType(soap*, ...) allocate, set all public members
/// - ns1__CRLRefType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CRLRefType(soap*, ns1__CRLRefType*) deserialize from a stream
/// - int soap_write_ns1__CRLRefType(soap*, ns1__CRLRefType*) serialize to a stream
/// - ns1__CRLRefType* ns1__CRLRefType::soap_dup(soap*) returns deep copy of ns1__CRLRefType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CRLRefType::soap_del() deep deletes ns1__CRLRefType data members, use only after ns1__CRLRefType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CRLRefType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValue.
    ns1__DigestAlgAndValueType*          ns1__DigestAlgAndValue         1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CRLIdentifier.
    ns1__CRLIdentifierType*              ns1__CRLIdentifier             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValueType is a complexType.
///
/// class ns1__DigestAlgAndValueType operations:
/// - ns1__DigestAlgAndValueType* soap_new_ns1__DigestAlgAndValueType(soap*) allocate
/// - ns1__DigestAlgAndValueType* soap_new_ns1__DigestAlgAndValueType(soap*, int num) allocate array
/// - ns1__DigestAlgAndValueType* soap_new_req_ns1__DigestAlgAndValueType(soap*, ...) allocate, set required members
/// - ns1__DigestAlgAndValueType* soap_new_set_ns1__DigestAlgAndValueType(soap*, ...) allocate, set all public members
/// - ns1__DigestAlgAndValueType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__DigestAlgAndValueType(soap*, ns1__DigestAlgAndValueType*) deserialize from a stream
/// - int soap_write_ns1__DigestAlgAndValueType(soap*, ns1__DigestAlgAndValueType*) serialize to a stream
/// - ns1__DigestAlgAndValueType* ns1__DigestAlgAndValueType::soap_dup(soap*) returns deep copy of ns1__DigestAlgAndValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DigestAlgAndValueType::soap_del() deep deletes ns1__DigestAlgAndValueType data members, use only after ns1__DigestAlgAndValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DigestAlgAndValueType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestMethod.
    ns5__DigestMethodType*               ns5__DigestMethod              1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestValue.
    ns5__DigestValueType*                ns5__DigestValue               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLIdentifierType is a complexType.
///
/// class ns1__CRLIdentifierType operations:
/// - ns1__CRLIdentifierType* soap_new_ns1__CRLIdentifierType(soap*) allocate
/// - ns1__CRLIdentifierType* soap_new_ns1__CRLIdentifierType(soap*, int num) allocate array
/// - ns1__CRLIdentifierType* soap_new_req_ns1__CRLIdentifierType(soap*, ...) allocate, set required members
/// - ns1__CRLIdentifierType* soap_new_set_ns1__CRLIdentifierType(soap*, ...) allocate, set all public members
/// - ns1__CRLIdentifierType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CRLIdentifierType(soap*, ns1__CRLIdentifierType*) deserialize from a stream
/// - int soap_write_ns1__CRLIdentifierType(soap*, ns1__CRLIdentifierType*) serialize to a stream
/// - ns1__CRLIdentifierType* ns1__CRLIdentifierType::soap_dup(soap*) returns deep copy of ns1__CRLIdentifierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CRLIdentifierType::soap_del() deep deletes ns1__CRLIdentifierType data members, use only after ns1__CRLIdentifierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CRLIdentifierType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":Issuer.
    _XML                                 ns1__Issuer                    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":IssueTime.
    _XML                                 ns1__IssueTime                 1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":Number.
    _XML                                 ns1__Number                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPRefsType is a complexType.
///
/// class ns1__OCSPRefsType operations:
/// - ns1__OCSPRefsType* soap_new_ns1__OCSPRefsType(soap*) allocate
/// - ns1__OCSPRefsType* soap_new_ns1__OCSPRefsType(soap*, int num) allocate array
/// - ns1__OCSPRefsType* soap_new_req_ns1__OCSPRefsType(soap*, ...) allocate, set required members
/// - ns1__OCSPRefsType* soap_new_set_ns1__OCSPRefsType(soap*, ...) allocate, set all public members
/// - ns1__OCSPRefsType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__OCSPRefsType(soap*, ns1__OCSPRefsType*) deserialize from a stream
/// - int soap_write_ns1__OCSPRefsType(soap*, ns1__OCSPRefsType*) serialize to a stream
/// - ns1__OCSPRefsType* ns1__OCSPRefsType::soap_dup(soap*) returns deep copy of ns1__OCSPRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OCSPRefsType::soap_del() deep deletes ns1__OCSPRefsType data members, use only after ns1__OCSPRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__OCSPRefsType
{ public:
/// Vector of ns1__OCSPRefType* element refs of length 1..unbounded.
    std::vector<ns1__OCSPRefType*      > ns1__OCSPRef                   1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPRefType is a complexType.
///
/// class ns1__OCSPRefType operations:
/// - ns1__OCSPRefType* soap_new_ns1__OCSPRefType(soap*) allocate
/// - ns1__OCSPRefType* soap_new_ns1__OCSPRefType(soap*, int num) allocate array
/// - ns1__OCSPRefType* soap_new_req_ns1__OCSPRefType(soap*, ...) allocate, set required members
/// - ns1__OCSPRefType* soap_new_set_ns1__OCSPRefType(soap*, ...) allocate, set all public members
/// - ns1__OCSPRefType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__OCSPRefType(soap*, ns1__OCSPRefType*) deserialize from a stream
/// - int soap_write_ns1__OCSPRefType(soap*, ns1__OCSPRefType*) serialize to a stream
/// - ns1__OCSPRefType* ns1__OCSPRefType::soap_dup(soap*) returns deep copy of ns1__OCSPRefType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OCSPRefType::soap_del() deep deletes ns1__OCSPRefType data members, use only after ns1__OCSPRefType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__OCSPRefType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifier.
    ns1__OCSPIdentifierType*             ns1__OCSPIdentifier            1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValue.
    ns1__DigestAlgAndValueType*          ns1__DigestAlgAndValue         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifierType is a complexType.
///
/// class ns1__OCSPIdentifierType operations:
/// - ns1__OCSPIdentifierType* soap_new_ns1__OCSPIdentifierType(soap*) allocate
/// - ns1__OCSPIdentifierType* soap_new_ns1__OCSPIdentifierType(soap*, int num) allocate array
/// - ns1__OCSPIdentifierType* soap_new_req_ns1__OCSPIdentifierType(soap*, ...) allocate, set required members
/// - ns1__OCSPIdentifierType* soap_new_set_ns1__OCSPIdentifierType(soap*, ...) allocate, set all public members
/// - ns1__OCSPIdentifierType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__OCSPIdentifierType(soap*, ns1__OCSPIdentifierType*) deserialize from a stream
/// - int soap_write_ns1__OCSPIdentifierType(soap*, ns1__OCSPIdentifierType*) serialize to a stream
/// - ns1__OCSPIdentifierType* ns1__OCSPIdentifierType::soap_dup(soap*) returns deep copy of ns1__OCSPIdentifierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OCSPIdentifierType::soap_del() deep deletes ns1__OCSPIdentifierType data members, use only after ns1__OCSPIdentifierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__OCSPIdentifierType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ResponderID.
    ns1__ResponderIDType*                ns1__ResponderID               1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ProducedAt.
    _XML                                 ns1__ProducedAt                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ResponderIDType is a complexType.
///
/// class ns1__ResponderIDType operations:
/// - ns1__ResponderIDType* soap_new_ns1__ResponderIDType(soap*) allocate
/// - ns1__ResponderIDType* soap_new_ns1__ResponderIDType(soap*, int num) allocate array
/// - ns1__ResponderIDType* soap_new_req_ns1__ResponderIDType(soap*, ...) allocate, set required members
/// - ns1__ResponderIDType* soap_new_set_ns1__ResponderIDType(soap*, ...) allocate, set all public members
/// - ns1__ResponderIDType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ResponderIDType(soap*, ns1__ResponderIDType*) deserialize from a stream
/// - int soap_write_ns1__ResponderIDType(soap*, ns1__ResponderIDType*) serialize to a stream
/// - ns1__ResponderIDType* ns1__ResponderIDType::soap_dup(soap*) returns deep copy of ns1__ResponderIDType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ResponderIDType::soap_del() deep deletes ns1__ResponderIDType data members, use only after ns1__ResponderIDType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ResponderIDType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ByName.
    _XML                                 ns1__ByName                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStampType is a complexType.
///
/// class ns1__SigAndRefsTimeStampType operations:
/// - ns1__SigAndRefsTimeStampType* soap_new_ns1__SigAndRefsTimeStampType(soap*) allocate
/// - ns1__SigAndRefsTimeStampType* soap_new_ns1__SigAndRefsTimeStampType(soap*, int num) allocate array
/// - ns1__SigAndRefsTimeStampType* soap_new_req_ns1__SigAndRefsTimeStampType(soap*, ...) allocate, set required members
/// - ns1__SigAndRefsTimeStampType* soap_new_set_ns1__SigAndRefsTimeStampType(soap*, ...) allocate, set all public members
/// - ns1__SigAndRefsTimeStampType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SigAndRefsTimeStampType(soap*, ns1__SigAndRefsTimeStampType*) deserialize from a stream
/// - int soap_write_ns1__SigAndRefsTimeStampType(soap*, ns1__SigAndRefsTimeStampType*) serialize to a stream
/// - ns1__SigAndRefsTimeStampType* ns1__SigAndRefsTimeStampType::soap_dup(soap*) returns deep copy of ns1__SigAndRefsTimeStampType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SigAndRefsTimeStampType::soap_del() deep deletes ns1__SigAndRefsTimeStampType data members, use only after ns1__SigAndRefsTimeStampType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SigAndRefsTimeStampType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp.
    ns1__EncapsulatedTimeStampType       ns1__EncapsulatedTimeStamp     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertificateValuesType is a complexType.
///
/// class ns1__CertificateValuesType operations:
/// - ns1__CertificateValuesType* soap_new_ns1__CertificateValuesType(soap*) allocate
/// - ns1__CertificateValuesType* soap_new_ns1__CertificateValuesType(soap*, int num) allocate array
/// - ns1__CertificateValuesType* soap_new_req_ns1__CertificateValuesType(soap*, ...) allocate, set required members
/// - ns1__CertificateValuesType* soap_new_set_ns1__CertificateValuesType(soap*, ...) allocate, set all public members
/// - ns1__CertificateValuesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CertificateValuesType(soap*, ns1__CertificateValuesType*) deserialize from a stream
/// - int soap_write_ns1__CertificateValuesType(soap*, ns1__CertificateValuesType*) serialize to a stream
/// - ns1__CertificateValuesType* ns1__CertificateValuesType::soap_dup(soap*) returns deep copy of ns1__CertificateValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CertificateValuesType::soap_del() deep deletes ns1__CertificateValuesType data members, use only after ns1__CertificateValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CertificateValuesType
{ public:
/// Vector of ns1__EncapsulatedX509CertificateType* element refs of length 1..unbounded.
    std::vector<ns1__EncapsulatedX509CertificateType*> ns1__EncapsulatedX509Certificate 1;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":RevocationValuesType is a complexType.
///
/// class ns1__RevocationValuesType operations:
/// - ns1__RevocationValuesType* soap_new_ns1__RevocationValuesType(soap*) allocate
/// - ns1__RevocationValuesType* soap_new_ns1__RevocationValuesType(soap*, int num) allocate array
/// - ns1__RevocationValuesType* soap_new_req_ns1__RevocationValuesType(soap*, ...) allocate, set required members
/// - ns1__RevocationValuesType* soap_new_set_ns1__RevocationValuesType(soap*, ...) allocate, set all public members
/// - ns1__RevocationValuesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__RevocationValuesType(soap*, ns1__RevocationValuesType*) deserialize from a stream
/// - int soap_write_ns1__RevocationValuesType(soap*, ns1__RevocationValuesType*) serialize to a stream
/// - ns1__RevocationValuesType* ns1__RevocationValuesType::soap_dup(soap*) returns deep copy of ns1__RevocationValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RevocationValuesType::soap_del() deep deletes ns1__RevocationValuesType data members, use only after ns1__RevocationValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RevocationValuesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CRLValues.
    ns1__CRLValuesType*                  ns1__CRLValues                 1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":OCSPValues.
    ns1__OCSPValuesType*                 ns1__OCSPValues                1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLValuesType is a complexType.
///
/// class ns1__CRLValuesType operations:
/// - ns1__CRLValuesType* soap_new_ns1__CRLValuesType(soap*) allocate
/// - ns1__CRLValuesType* soap_new_ns1__CRLValuesType(soap*, int num) allocate array
/// - ns1__CRLValuesType* soap_new_req_ns1__CRLValuesType(soap*, ...) allocate, set required members
/// - ns1__CRLValuesType* soap_new_set_ns1__CRLValuesType(soap*, ...) allocate, set all public members
/// - ns1__CRLValuesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CRLValuesType(soap*, ns1__CRLValuesType*) deserialize from a stream
/// - int soap_write_ns1__CRLValuesType(soap*, ns1__CRLValuesType*) serialize to a stream
/// - ns1__CRLValuesType* ns1__CRLValuesType::soap_dup(soap*) returns deep copy of ns1__CRLValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CRLValuesType::soap_del() deep deletes ns1__CRLValuesType data members, use only after ns1__CRLValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CRLValuesType
{ public:
/// Vector of ns1__EncapsulatedCRLValueType* element refs of length 1..unbounded.
    std::vector<ns1__EncapsulatedCRLValueType*> ns1__EncapsulatedCRLValue      1;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPValuesType is a complexType.
///
/// class ns1__OCSPValuesType operations:
/// - ns1__OCSPValuesType* soap_new_ns1__OCSPValuesType(soap*) allocate
/// - ns1__OCSPValuesType* soap_new_ns1__OCSPValuesType(soap*, int num) allocate array
/// - ns1__OCSPValuesType* soap_new_req_ns1__OCSPValuesType(soap*, ...) allocate, set required members
/// - ns1__OCSPValuesType* soap_new_set_ns1__OCSPValuesType(soap*, ...) allocate, set all public members
/// - ns1__OCSPValuesType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__OCSPValuesType(soap*, ns1__OCSPValuesType*) deserialize from a stream
/// - int soap_write_ns1__OCSPValuesType(soap*, ns1__OCSPValuesType*) serialize to a stream
/// - ns1__OCSPValuesType* ns1__OCSPValuesType::soap_dup(soap*) returns deep copy of ns1__OCSPValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OCSPValuesType::soap_del() deep deletes ns1__OCSPValuesType data members, use only after ns1__OCSPValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__OCSPValuesType
{ public:
/// Vector of ns1__EncapsulatedOCSPValueType* element refs of length 1..unbounded.
    std::vector<ns1__EncapsulatedOCSPValueType*> ns1__EncapsulatedOCSPValue     1;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStampType is a complexType.
///
/// class ns1__ArchiveTimeStampType operations:
/// - ns1__ArchiveTimeStampType* soap_new_ns1__ArchiveTimeStampType(soap*) allocate
/// - ns1__ArchiveTimeStampType* soap_new_ns1__ArchiveTimeStampType(soap*, int num) allocate array
/// - ns1__ArchiveTimeStampType* soap_new_req_ns1__ArchiveTimeStampType(soap*, ...) allocate, set required members
/// - ns1__ArchiveTimeStampType* soap_new_set_ns1__ArchiveTimeStampType(soap*, ...) allocate, set all public members
/// - ns1__ArchiveTimeStampType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArchiveTimeStampType(soap*, ns1__ArchiveTimeStampType*) deserialize from a stream
/// - int soap_write_ns1__ArchiveTimeStampType(soap*, ns1__ArchiveTimeStampType*) serialize to a stream
/// - ns1__ArchiveTimeStampType* ns1__ArchiveTimeStampType::soap_dup(soap*) returns deep copy of ns1__ArchiveTimeStampType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArchiveTimeStampType::soap_del() deep deletes ns1__ArchiveTimeStampType data members, use only after ns1__ArchiveTimeStampType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArchiveTimeStampType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp.
    ns1__EncapsulatedTimeStampType       ns1__EncapsulatedTimeStamp     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGListType is a complexType.
///
/// class ns7__SVGListType operations:
/// - ns7__SVGListType* soap_new_ns7__SVGListType(soap*) allocate
/// - ns7__SVGListType* soap_new_ns7__SVGListType(soap*, int num) allocate array
/// - ns7__SVGListType* soap_new_req_ns7__SVGListType(soap*, ...) allocate, set required members
/// - ns7__SVGListType* soap_new_set_ns7__SVGListType(soap*, ...) allocate, set all public members
/// - ns7__SVGListType::soap_default(soap*) reset members to default
/// - int soap_read_ns7__SVGListType(soap*, ns7__SVGListType*) deserialize from a stream
/// - int soap_write_ns7__SVGListType(soap*, ns7__SVGListType*) serialize to a stream
/// - ns7__SVGListType* ns7__SVGListType::soap_dup(soap*) returns deep copy of ns7__SVGListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns7__SVGListType::soap_del() deep deletes ns7__SVGListType data members, use only after ns7__SVGListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns7__SVGListType
{ public:
/// Vector of ns7__SVGType element refs of length 1..unbounded.
    std::vector<ns7__SVGType           > ns7__SVG                       1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponseType is a complexType.
///
/// class ns3__AttributeSupplierResponseType operations:
/// - ns3__AttributeSupplierResponseType* soap_new_ns3__AttributeSupplierResponseType(soap*) allocate
/// - ns3__AttributeSupplierResponseType* soap_new_ns3__AttributeSupplierResponseType(soap*, int num) allocate array
/// - ns3__AttributeSupplierResponseType* soap_new_req_ns3__AttributeSupplierResponseType(soap*, ...) allocate, set required members
/// - ns3__AttributeSupplierResponseType* soap_new_set_ns3__AttributeSupplierResponseType(soap*, ...) allocate, set all public members
/// - ns3__AttributeSupplierResponseType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__AttributeSupplierResponseType(soap*, ns3__AttributeSupplierResponseType*) deserialize from a stream
/// - int soap_write_ns3__AttributeSupplierResponseType(soap*, ns3__AttributeSupplierResponseType*) serialize to a stream
/// - ns3__AttributeSupplierResponseType* ns3__AttributeSupplierResponseType::soap_dup(soap*) returns deep copy of ns3__AttributeSupplierResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeSupplierResponseType::soap_del() deep deletes ns3__AttributeSupplierResponseType data members, use only after ns3__AttributeSupplierResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeSupplierResponseType
{ public:
/// Vector of ns3__AttributeSupplierType* of length 0..unbounded.
    std::vector<ns3__AttributeSupplierType*> AttributeSupplier              0;
/// Element "ErrorMessage" of XSD type xs:string.
    std::string*                         ErrorMessage                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignRequest is a complexType.
///
/// class ns4__SignRequest operations:
/// - ns4__SignRequest* soap_new_ns4__SignRequest(soap*) allocate
/// - ns4__SignRequest* soap_new_ns4__SignRequest(soap*, int num) allocate array
/// - ns4__SignRequest* soap_new_req_ns4__SignRequest(soap*, ...) allocate, set required members
/// - ns4__SignRequest* soap_new_set_ns4__SignRequest(soap*, ...) allocate, set all public members
/// - ns4__SignRequest::soap_default(soap*) reset members to default
/// - int soap_read_ns4__SignRequest(soap*, ns4__SignRequest*) deserialize from a stream
/// - int soap_write_ns4__SignRequest(soap*, ns4__SignRequest*) serialize to a stream
/// - ns4__SignRequest* ns4__SignRequest::soap_dup(soap*) returns deep copy of ns4__SignRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__SignRequest::soap_del() deep deletes ns4__SignRequest data members, use only after ns4__SignRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__SignRequest
{ public:
/// Element "ProcessId" of XSD type xs:string.
    std::string                          ProcessId                      1;	///< Required element.
/// Element "PersonalData" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":PersonalDataType.
    ns4__PersonalDataType*               PersonalData                   1;	///< Required element.
/// Element "AttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":AttributeListType.
    ns4__AttributeListType*              AttributeList                  1;	///< Required element.
/// Element "SignatureFieldName" of XSD type xs:string.
    std::string                          SignatureFieldName             1;	///< Required element.
/// Element "SignDocument" of XSD type xs:base64Binary.
    xsd__base64Binary                    SignDocument                   1;	///< Required element.
/// Element "LTV" of XSD type xs:int.
    int*                                 LTV                            0;	///< Optional element.
/// Element "Page" of XSD type xs:int.
    int                                  Page                           1;	///< Required element.
/// Element "X" of XSD type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of XSD type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Orientation" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignatureOrientationEnumType.
    enum ns4__SignatureOrientationEnumType  Orientation                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":PersonalDataType is a complexType.
///
/// class ns4__PersonalDataType operations:
/// - ns4__PersonalDataType* soap_new_ns4__PersonalDataType(soap*) allocate
/// - ns4__PersonalDataType* soap_new_ns4__PersonalDataType(soap*, int num) allocate array
/// - ns4__PersonalDataType* soap_new_req_ns4__PersonalDataType(soap*, ...) allocate, set required members
/// - ns4__PersonalDataType* soap_new_set_ns4__PersonalDataType(soap*, ...) allocate, set all public members
/// - ns4__PersonalDataType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__PersonalDataType(soap*, ns4__PersonalDataType*) deserialize from a stream
/// - int soap_write_ns4__PersonalDataType(soap*, ns4__PersonalDataType*) serialize to a stream
/// - ns4__PersonalDataType* ns4__PersonalDataType::soap_dup(soap*) returns deep copy of ns4__PersonalDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__PersonalDataType::soap_del() deep deletes ns4__PersonalDataType data members, use only after ns4__PersonalDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__PersonalDataType
{ public:
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "NIC" of XSD type xs:string.
    std::string                          NIC                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":AttributeListType is a complexType.
///
/// class ns4__AttributeListType operations:
/// - ns4__AttributeListType* soap_new_ns4__AttributeListType(soap*) allocate
/// - ns4__AttributeListType* soap_new_ns4__AttributeListType(soap*, int num) allocate array
/// - ns4__AttributeListType* soap_new_req_ns4__AttributeListType(soap*, ...) allocate, set required members
/// - ns4__AttributeListType* soap_new_set_ns4__AttributeListType(soap*, ...) allocate, set all public members
/// - ns4__AttributeListType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__AttributeListType(soap*, ns4__AttributeListType*) deserialize from a stream
/// - int soap_write_ns4__AttributeListType(soap*, ns4__AttributeListType*) serialize to a stream
/// - ns4__AttributeListType* ns4__AttributeListType::soap_dup(soap*) returns deep copy of ns4__AttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AttributeListType::soap_del() deep deletes ns4__AttributeListType data members, use only after ns4__AttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AttributeListType
{ public:
/// Vector of ns4__AttributeType* of length 1..unbounded.
    std::vector<ns4__AttributeType*    > Attribute                      1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":AttributeType is a complexType.
///
/// class ns4__AttributeType operations:
/// - ns4__AttributeType* soap_new_ns4__AttributeType(soap*) allocate
/// - ns4__AttributeType* soap_new_ns4__AttributeType(soap*, int num) allocate array
/// - ns4__AttributeType* soap_new_req_ns4__AttributeType(soap*, ...) allocate, set required members
/// - ns4__AttributeType* soap_new_set_ns4__AttributeType(soap*, ...) allocate, set all public members
/// - ns4__AttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__AttributeType(soap*, ns4__AttributeType*) deserialize from a stream
/// - int soap_write_ns4__AttributeType(soap*, ns4__AttributeType*) serialize to a stream
/// - ns4__AttributeType* ns4__AttributeType::soap_dup(soap*) returns deep copy of ns4__AttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AttributeType::soap_del() deep deletes ns4__AttributeType data members, use only after ns4__AttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AttributeType
{ public:
/// Element "AttributeSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":AttributeSupplierType.
    ns4__AttributeSupplierType*          AttributeSupplier              1;	///< Required element.
/// Element "MainAttribute" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":MainAttributeType.
    ns4__MainAttributeType*              MainAttribute                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":AttributeSupplierType is a complexType.
///
/// class ns4__AttributeSupplierType operations:
/// - ns4__AttributeSupplierType* soap_new_ns4__AttributeSupplierType(soap*) allocate
/// - ns4__AttributeSupplierType* soap_new_ns4__AttributeSupplierType(soap*, int num) allocate array
/// - ns4__AttributeSupplierType* soap_new_req_ns4__AttributeSupplierType(soap*, ...) allocate, set required members
/// - ns4__AttributeSupplierType* soap_new_set_ns4__AttributeSupplierType(soap*, ...) allocate, set all public members
/// - ns4__AttributeSupplierType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__AttributeSupplierType(soap*, ns4__AttributeSupplierType*) deserialize from a stream
/// - int soap_write_ns4__AttributeSupplierType(soap*, ns4__AttributeSupplierType*) serialize to a stream
/// - ns4__AttributeSupplierType* ns4__AttributeSupplierType::soap_dup(soap*) returns deep copy of ns4__AttributeSupplierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AttributeSupplierType::soap_del() deep deletes ns4__AttributeSupplierType data members, use only after ns4__AttributeSupplierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AttributeSupplierType
{ public:
/// Element "Id" of XSD type xs:anyURI.
    xsd__anyURI                          Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Type" of XSD type xs:string.
    std::string*                         Type                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":MainAttributeType is a complexType.
///
/// class ns4__MainAttributeType operations:
/// - ns4__MainAttributeType* soap_new_ns4__MainAttributeType(soap*) allocate
/// - ns4__MainAttributeType* soap_new_ns4__MainAttributeType(soap*, int num) allocate array
/// - ns4__MainAttributeType* soap_new_req_ns4__MainAttributeType(soap*, ...) allocate, set required members
/// - ns4__MainAttributeType* soap_new_set_ns4__MainAttributeType(soap*, ...) allocate, set all public members
/// - ns4__MainAttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__MainAttributeType(soap*, ns4__MainAttributeType*) deserialize from a stream
/// - int soap_write_ns4__MainAttributeType(soap*, ns4__MainAttributeType*) serialize to a stream
/// - ns4__MainAttributeType* ns4__MainAttributeType::soap_dup(soap*) returns deep copy of ns4__MainAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__MainAttributeType::soap_del() deep deletes ns4__MainAttributeType data members, use only after ns4__MainAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__MainAttributeType
{ public:
/// Element "AttributeID" of XSD type xs:string.
    std::string                          AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":LegalActListType.
    ns4__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "SubAttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SubAttributeListType.
    ns4__SubAttributeListType*           SubAttributeList               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":LegalActListType is a complexType.
///
/// class ns4__LegalActListType operations:
/// - ns4__LegalActListType* soap_new_ns4__LegalActListType(soap*) allocate
/// - ns4__LegalActListType* soap_new_ns4__LegalActListType(soap*, int num) allocate array
/// - ns4__LegalActListType* soap_new_req_ns4__LegalActListType(soap*, ...) allocate, set required members
/// - ns4__LegalActListType* soap_new_set_ns4__LegalActListType(soap*, ...) allocate, set all public members
/// - ns4__LegalActListType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__LegalActListType(soap*, ns4__LegalActListType*) deserialize from a stream
/// - int soap_write_ns4__LegalActListType(soap*, ns4__LegalActListType*) serialize to a stream
/// - ns4__LegalActListType* ns4__LegalActListType::soap_dup(soap*) returns deep copy of ns4__LegalActListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__LegalActListType::soap_del() deep deletes ns4__LegalActListType data members, use only after ns4__LegalActListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__LegalActListType
{ public:
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > LegalAct                       1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SubAttributeListType is a complexType.
///
/// class ns4__SubAttributeListType operations:
/// - ns4__SubAttributeListType* soap_new_ns4__SubAttributeListType(soap*) allocate
/// - ns4__SubAttributeListType* soap_new_ns4__SubAttributeListType(soap*, int num) allocate array
/// - ns4__SubAttributeListType* soap_new_req_ns4__SubAttributeListType(soap*, ...) allocate, set required members
/// - ns4__SubAttributeListType* soap_new_set_ns4__SubAttributeListType(soap*, ...) allocate, set all public members
/// - ns4__SubAttributeListType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__SubAttributeListType(soap*, ns4__SubAttributeListType*) deserialize from a stream
/// - int soap_write_ns4__SubAttributeListType(soap*, ns4__SubAttributeListType*) serialize to a stream
/// - ns4__SubAttributeListType* ns4__SubAttributeListType::soap_dup(soap*) returns deep copy of ns4__SubAttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__SubAttributeListType::soap_del() deep deletes ns4__SubAttributeListType data members, use only after ns4__SubAttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__SubAttributeListType
{ public:
/// Vector of ns4__SubAttributeType* of length 1..unbounded.
    std::vector<ns4__SubAttributeType* > SubAttribute                   1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SubAttributeType is a complexType.
///
/// class ns4__SubAttributeType operations:
/// - ns4__SubAttributeType* soap_new_ns4__SubAttributeType(soap*) allocate
/// - ns4__SubAttributeType* soap_new_ns4__SubAttributeType(soap*, int num) allocate array
/// - ns4__SubAttributeType* soap_new_req_ns4__SubAttributeType(soap*, ...) allocate, set required members
/// - ns4__SubAttributeType* soap_new_set_ns4__SubAttributeType(soap*, ...) allocate, set all public members
/// - ns4__SubAttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns4__SubAttributeType(soap*, ns4__SubAttributeType*) deserialize from a stream
/// - int soap_write_ns4__SubAttributeType(soap*, ns4__SubAttributeType*) serialize to a stream
/// - ns4__SubAttributeType* ns4__SubAttributeType::soap_dup(soap*) returns deep copy of ns4__SubAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__SubAttributeType::soap_del() deep deletes ns4__SubAttributeType data members, use only after ns4__SubAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__SubAttributeType
{ public:
/// Element "AttributeID" of XSD type xs:string.
    std::string                          AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Value" of XSD type xs:string.
    std::string*                         Value                          0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":LegalActListType.
    ns4__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "Type" of XSD type xs:string.
    std::string*                         Type                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignResponse is a complexType.
///
/// class ns4__SignResponse operations:
/// - ns4__SignResponse* soap_new_ns4__SignResponse(soap*) allocate
/// - ns4__SignResponse* soap_new_ns4__SignResponse(soap*, int num) allocate array
/// - ns4__SignResponse* soap_new_req_ns4__SignResponse(soap*, ...) allocate, set required members
/// - ns4__SignResponse* soap_new_set_ns4__SignResponse(soap*, ...) allocate, set all public members
/// - ns4__SignResponse::soap_default(soap*) reset members to default
/// - int soap_read_ns4__SignResponse(soap*, ns4__SignResponse*) deserialize from a stream
/// - int soap_write_ns4__SignResponse(soap*, ns4__SignResponse*) serialize to a stream
/// - ns4__SignResponse* ns4__SignResponse::soap_dup(soap*) returns deep copy of ns4__SignResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__SignResponse::soap_del() deep deletes ns4__SignResponse data members, use only after ns4__SignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__SignResponse
{ public:
/// Element "ProcessId" of XSD type xs:string.
    std::string                          ProcessId                      1;	///< Required element.
/// Element "Status" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":Status.
    ns4__Status*                         Status                         1;	///< Required element.
/// Element "SignedDocument" of XSD type xs:base64Binary.
    xsd__base64Binary*                   SignedDocument                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":Status is a complexType.
///
/// class ns4__Status operations:
/// - ns4__Status* soap_new_ns4__Status(soap*) allocate
/// - ns4__Status* soap_new_ns4__Status(soap*, int num) allocate array
/// - ns4__Status* soap_new_req_ns4__Status(soap*, ...) allocate, set required members
/// - ns4__Status* soap_new_set_ns4__Status(soap*, ...) allocate, set all public members
/// - ns4__Status::soap_default(soap*) reset members to default
/// - int soap_read_ns4__Status(soap*, ns4__Status*) deserialize from a stream
/// - int soap_write_ns4__Status(soap*, ns4__Status*) serialize to a stream
/// - ns4__Status* ns4__Status::soap_dup(soap*) returns deep copy of ns4__Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__Status::soap_del() deep deletes ns4__Status data members, use only after ns4__Status::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__Status
{ public:
/// Element "Code" of XSD type xs:string.
    std::string                          Code                           1;	///< Required element.
/// Element "Message" of XSD type xs:string.
    std::string                          Message                        1;	///< Required element.
/// Element "Field" of XSD type xs:string.
    std::string*                         Field                          0;	///< Optional element.
/// Element "FieldValue" of XSD type xs:string.
    std::string*                         FieldValue                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509CertificateType is a complexType with simpleContent.
///
/// class ns5__X509CertificateType operations:
/// - ns5__X509CertificateType* soap_new_ns5__X509CertificateType(soap*) allocate
/// - ns5__X509CertificateType* soap_new_ns5__X509CertificateType(soap*, int num) allocate array
/// - ns5__X509CertificateType* soap_new_req_ns5__X509CertificateType(soap*, ...) allocate, set required members
/// - ns5__X509CertificateType* soap_new_set_ns5__X509CertificateType(soap*, ...) allocate, set all public members
/// - ns5__X509CertificateType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__X509CertificateType(soap*, ns5__X509CertificateType*) deserialize from a stream
/// - int soap_write_ns5__X509CertificateType(soap*, ns5__X509CertificateType*) serialize to a stream
/// - ns5__X509CertificateType* ns5__X509CertificateType::soap_dup(soap*) returns deep copy of ns5__X509CertificateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__X509CertificateType::soap_del() deep deletes ns5__X509CertificateType data members, use only after ns5__X509CertificateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__X509CertificateType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":DigestValueType is a complexType with simpleContent.
///
/// class ns5__DigestValueType operations:
/// - ns5__DigestValueType* soap_new_ns5__DigestValueType(soap*) allocate
/// - ns5__DigestValueType* soap_new_ns5__DigestValueType(soap*, int num) allocate array
/// - ns5__DigestValueType* soap_new_req_ns5__DigestValueType(soap*, ...) allocate, set required members
/// - ns5__DigestValueType* soap_new_set_ns5__DigestValueType(soap*, ...) allocate, set all public members
/// - ns5__DigestValueType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__DigestValueType(soap*, ns5__DigestValueType*) deserialize from a stream
/// - int soap_write_ns5__DigestValueType(soap*, ns5__DigestValueType*) serialize to a stream
/// - ns5__DigestValueType* ns5__DigestValueType::soap_dup(soap*) returns deep copy of ns5__DigestValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__DigestValueType::soap_del() deep deletes ns5__DigestValueType data members, use only after ns5__DigestValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__DigestValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID*                             Id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignatureValueType is a complexType with simpleContent.
///
/// class ns5__SignatureValueType operations:
/// - ns5__SignatureValueType* soap_new_ns5__SignatureValueType(soap*) allocate
/// - ns5__SignatureValueType* soap_new_ns5__SignatureValueType(soap*, int num) allocate array
/// - ns5__SignatureValueType* soap_new_req_ns5__SignatureValueType(soap*, ...) allocate, set required members
/// - ns5__SignatureValueType* soap_new_set_ns5__SignatureValueType(soap*, ...) allocate, set all public members
/// - ns5__SignatureValueType::soap_default(soap*) reset members to default
/// - int soap_read_ns5__SignatureValueType(soap*, ns5__SignatureValueType*) deserialize from a stream
/// - int soap_write_ns5__SignatureValueType(soap*, ns5__SignatureValueType*) serialize to a stream
/// - ns5__SignatureValueType* ns5__SignatureValueType::soap_dup(soap*) returns deep copy of ns5__SignatureValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignatureValueType::soap_del() deep deletes ns5__SignatureValueType data members, use only after ns5__SignatureValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignatureValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedX509CertificateType is a complexType with simpleContent.
///
/// class ns1__EncapsulatedX509CertificateType operations:
/// - ns1__EncapsulatedX509CertificateType* soap_new_ns1__EncapsulatedX509CertificateType(soap*) allocate
/// - ns1__EncapsulatedX509CertificateType* soap_new_ns1__EncapsulatedX509CertificateType(soap*, int num) allocate array
/// - ns1__EncapsulatedX509CertificateType* soap_new_req_ns1__EncapsulatedX509CertificateType(soap*, ...) allocate, set required members
/// - ns1__EncapsulatedX509CertificateType* soap_new_set_ns1__EncapsulatedX509CertificateType(soap*, ...) allocate, set all public members
/// - ns1__EncapsulatedX509CertificateType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__EncapsulatedX509CertificateType(soap*, ns1__EncapsulatedX509CertificateType*) deserialize from a stream
/// - int soap_write_ns1__EncapsulatedX509CertificateType(soap*, ns1__EncapsulatedX509CertificateType*) serialize to a stream
/// - ns1__EncapsulatedX509CertificateType* ns1__EncapsulatedX509CertificateType::soap_dup(soap*) returns deep copy of ns1__EncapsulatedX509CertificateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EncapsulatedX509CertificateType::soap_del() deep deletes ns1__EncapsulatedX509CertificateType data members, use only after ns1__EncapsulatedX509CertificateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EncapsulatedX509CertificateType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedCRLValueType is a complexType with simpleContent.
///
/// class ns1__EncapsulatedCRLValueType operations:
/// - ns1__EncapsulatedCRLValueType* soap_new_ns1__EncapsulatedCRLValueType(soap*) allocate
/// - ns1__EncapsulatedCRLValueType* soap_new_ns1__EncapsulatedCRLValueType(soap*, int num) allocate array
/// - ns1__EncapsulatedCRLValueType* soap_new_req_ns1__EncapsulatedCRLValueType(soap*, ...) allocate, set required members
/// - ns1__EncapsulatedCRLValueType* soap_new_set_ns1__EncapsulatedCRLValueType(soap*, ...) allocate, set all public members
/// - ns1__EncapsulatedCRLValueType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__EncapsulatedCRLValueType(soap*, ns1__EncapsulatedCRLValueType*) deserialize from a stream
/// - int soap_write_ns1__EncapsulatedCRLValueType(soap*, ns1__EncapsulatedCRLValueType*) serialize to a stream
/// - ns1__EncapsulatedCRLValueType* ns1__EncapsulatedCRLValueType::soap_dup(soap*) returns deep copy of ns1__EncapsulatedCRLValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EncapsulatedCRLValueType::soap_del() deep deletes ns1__EncapsulatedCRLValueType data members, use only after ns1__EncapsulatedCRLValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EncapsulatedCRLValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedOCSPValueType is a complexType with simpleContent.
///
/// class ns1__EncapsulatedOCSPValueType operations:
/// - ns1__EncapsulatedOCSPValueType* soap_new_ns1__EncapsulatedOCSPValueType(soap*) allocate
/// - ns1__EncapsulatedOCSPValueType* soap_new_ns1__EncapsulatedOCSPValueType(soap*, int num) allocate array
/// - ns1__EncapsulatedOCSPValueType* soap_new_req_ns1__EncapsulatedOCSPValueType(soap*, ...) allocate, set required members
/// - ns1__EncapsulatedOCSPValueType* soap_new_set_ns1__EncapsulatedOCSPValueType(soap*, ...) allocate, set all public members
/// - ns1__EncapsulatedOCSPValueType::soap_default(soap*) reset members to default
/// - int soap_read_ns1__EncapsulatedOCSPValueType(soap*, ns1__EncapsulatedOCSPValueType*) deserialize from a stream
/// - int soap_write_ns1__EncapsulatedOCSPValueType(soap*, ns1__EncapsulatedOCSPValueType*) serialize to a stream
/// - ns1__EncapsulatedOCSPValueType* ns1__EncapsulatedOCSPValueType::soap_dup(soap*) returns deep copy of ns1__EncapsulatedOCSPValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EncapsulatedOCSPValueType::soap_del() deep deletes ns1__EncapsulatedOCSPValueType data members, use only after ns1__EncapsulatedOCSPValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EncapsulatedOCSPValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeRequest of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeRequestType.
typedef ns2__AttributeRequestType _ns2__AttributeRequest;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeResponseType.
typedef ns2__AttributeResponseType _ns2__AttributeResponse;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":PSAAttributeRequest of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":PSAAttributeRequestType.
typedef ns2__PSAAttributeRequestType _ns2__PSAAttributeRequest;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeResponseType.
typedef ns2__SingleAttributeResponseType _ns2__SingleAttributeResponse;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Signature of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureType.
typedef ns5__SignatureType _ns5__Signature;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":SignedInfo of XSD type "http://www.w3.org/2000/09/xmldsig#":SignedInfoType.
typedef ns5__SignedInfoType _ns5__SignedInfo;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod of XSD type "http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethodType.
typedef ns5__CanonicalizationMethodType _ns5__CanonicalizationMethod;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":SignatureMethod of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureMethodType.
typedef ns5__SignatureMethodType _ns5__SignatureMethod;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Reference of XSD type "http://www.w3.org/2000/09/xmldsig#":ReferenceType.
typedef ns5__ReferenceType _ns5__Reference;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Transforms of XSD type "http://www.w3.org/2000/09/xmldsig#":TransformsType.
typedef ns5__TransformsType _ns5__Transforms;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Transform of XSD type "http://www.w3.org/2000/09/xmldsig#":TransformType.
typedef ns5__TransformType _ns5__Transform;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":DigestMethod of XSD type "http://www.w3.org/2000/09/xmldsig#":DigestMethodType.
typedef ns5__DigestMethodType _ns5__DigestMethod;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":KeyInfo of XSD type "http://www.w3.org/2000/09/xmldsig#":KeyInfoType.
typedef ns5__KeyInfoType _ns5__KeyInfo;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509Data of XSD type "http://www.w3.org/2000/09/xmldsig#":X509DataType.
typedef ns5__X509DataType _ns5__X509Data;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Object of XSD type "http://www.w3.org/2000/09/xmldsig#":ObjectType.
typedef ns5__ObjectType _ns5__Object;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509Certificate of XSD type "http://www.w3.org/2000/09/xmldsig#":X509CertificateType.
typedef ns5__X509CertificateType _ns5__X509Certificate;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":DigestValue of XSD type "http://www.w3.org/2000/09/xmldsig#":DigestValueType.
typedef ns5__DigestValueType _ns5__DigestValue;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":SignatureValue of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureValueType.
typedef ns5__SignatureValueType _ns5__SignatureValue;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509IssuerName of XSD type "http://www.w3.org/2000/09/xmldsig#":X509IssuerNameType.
typedef ns5__X509IssuerNameType _ns5__X509IssuerName;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509SerialNumber of XSD type "http://www.w3.org/2000/09/xmldsig#":X509SerialNumberType.
typedef ns5__X509SerialNumberType _ns5__X509SerialNumber;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":Attribute of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeType.
typedef ns3__AttributeType _ns3__Attribute;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SignatureAttribute of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureType.
typedef ns5__SignatureType _ns3__SignatureAttribute;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":QualifyingProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":QualifyingPropertiesType.
typedef ns1__QualifyingPropertiesType _ns1__QualifyingProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignedProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignedPropertiesType.
typedef ns1__SignedPropertiesType _ns1__SignedProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignedSignatureProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignedSignaturePropertiesType.
typedef ns1__SignedSignaturePropertiesType _ns1__SignedSignatureProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SigningCertificate of XSD type "http://uri.etsi.org/01903/v1.3.2#":SigningCertificateType.
typedef ns1__SigningCertificateType _ns1__SigningCertificate;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":Cert of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertType.
typedef ns1__CertType _ns1__Cert;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CertDigest of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertDigestType.
typedef ns1__CertDigestType _ns1__CertDigest;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":IssuerSerial of XSD type "http://uri.etsi.org/01903/v1.3.2#":IssuerSerialType.
typedef ns1__IssuerSerialType _ns1__IssuerSerial;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SigningTime of XSD type "http://uri.etsi.org/01903/v1.3.2#":SigningTimeType.
typedef ns1__SigningTimeType _ns1__SigningTime;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignerRole of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignerRoleType.
typedef ns1__SignerRoleType _ns1__SignerRole;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ClaimedRoles of XSD type "http://uri.etsi.org/01903/v1.3.2#":ClaimedRolesListType.
typedef ns1__ClaimedRolesListType _ns1__ClaimedRoles;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ClaimedRole of XSD type "http://uri.etsi.org/01903/v1.3.2#":ClaimedRoleType.
typedef ns1__ClaimedRoleType _ns1__ClaimedRole;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":UnsignedProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":UnsignedPropertiesType.
typedef ns1__UnsignedPropertiesType _ns1__UnsignedProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":UnsignedSignatureProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":UnsignedSignaturePropertiesType.
typedef ns1__UnsignedSignaturePropertiesType _ns1__UnsignedSignatureProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CounterSignature of XSD type "http://uri.etsi.org/01903/v1.3.2#":CounterSignatureType.
typedef ns1__CounterSignatureType _ns1__CounterSignature;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStampType.
typedef ns1__SignatureTimeStampType _ns1__SignatureTimeStamp;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStampType.
typedef ns1__EncapsulatedTimeStampType _ns1__EncapsulatedTimeStamp;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefsType.
typedef ns1__CompleteCertificateRefsType _ns1__CompleteCertificateRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CertRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertRefsType.
typedef ns1__CertRefsType _ns1__CertRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefsType.
typedef ns1__CompleteRevocationRefsType _ns1__CompleteRevocationRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLRefsType.
typedef ns1__CRLRefsType _ns1__CRLRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLRef of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLRefType.
typedef ns1__CRLRefType _ns1__CRLRef;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValue of XSD type "http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValueType.
typedef ns1__DigestAlgAndValueType _ns1__DigestAlgAndValue;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLIdentifier of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLIdentifierType.
typedef ns1__CRLIdentifierType _ns1__CRLIdentifier;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPRefsType.
typedef ns1__OCSPRefsType _ns1__OCSPRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPRef of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPRefType.
typedef ns1__OCSPRefType _ns1__OCSPRef;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifier of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifierType.
typedef ns1__OCSPIdentifierType _ns1__OCSPIdentifier;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ResponderID of XSD type "http://uri.etsi.org/01903/v1.3.2#":ResponderIDType.
typedef ns1__ResponderIDType _ns1__ResponderID;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStampType.
typedef ns1__SigAndRefsTimeStampType _ns1__SigAndRefsTimeStamp;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CertificateValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertificateValuesType.
typedef ns1__CertificateValuesType _ns1__CertificateValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedX509Certificate of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedX509CertificateType.
typedef ns1__EncapsulatedX509CertificateType _ns1__EncapsulatedX509Certificate;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":RevocationValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":RevocationValuesType.
typedef ns1__RevocationValuesType _ns1__RevocationValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLValuesType.
typedef ns1__CRLValuesType _ns1__CRLValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedCRLValue of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedCRLValueType.
typedef ns1__EncapsulatedCRLValueType _ns1__EncapsulatedCRLValue;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPValuesType.
typedef ns1__OCSPValuesType _ns1__OCSPValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedOCSPValue of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedOCSPValueType.
typedef ns1__EncapsulatedOCSPValueType _ns1__EncapsulatedOCSPValue;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStampType.
typedef ns1__ArchiveTimeStampType _ns1__ArchiveTimeStamp;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGList of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGListType.
typedef ns7__SVGListType _ns7__SVGList;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVG of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGType.
typedef ns7__SVGType _ns7__SVG;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponseType.
typedef ns3__AttributeSupplierResponseType _ns3__AttributeSupplierResponse;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature             *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignRequest of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignRequest.
typedef ns4__SignRequest _ns4__SignRequest;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature":SignResponse.
typedef ns4__SignResponse _ns4__SignResponse;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	AttributeClientServiceBinding 
//gsoap ns1  service type:	AttributeClientService 
//gsoap ns1  service port:	ajp://preprod.scap.autenticacao.gov.pt/DSS/ACService 
//gsoap ns1  service namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns2  service name:	AttributeSupplierBinding 
//gsoap ns2  service type:	AttributeSupplierService 
//gsoap ns2  service port:	https://preprod.scap.autenticacao.gov.pt/DSS/ASService 
//gsoap ns2  service namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns4  service name:	PDFSignatureSoapBinding 
//gsoap ns4  service type:	PDFSignature 
//gsoap ns4  service port:	https://preprod.scap.autenticacao.gov.pt/PADES/PDFSignature 
//gsoap ns4  service namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature 
//gsoap ns4  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSDL Definitions

@section WSDL_bindings Service Bindings

  - @ref AttributeClientServiceBinding

  - @ref AttributeSupplierBinding

  - @ref PDFSignatureSoapBinding

@section WSDL_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AttributeClientServiceBinding Binding "AttributeClientServiceBinding"

@section AttributeClientServiceBinding_operations Operations of Binding "AttributeClientServiceBinding"

  - @ref __ns1__Attributes

@section AttributeClientServiceBinding_ports Endpoints of Binding "AttributeClientServiceBinding"

  - ajp://preprod.scap.autenticacao.gov.pt/DSS/ACService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/**

@page AttributeSupplierBinding Binding "AttributeSupplierBinding"

@section AttributeSupplierBinding_operations Operations of Binding "AttributeSupplierBinding"

  - @ref __ns2__AttributeSuppliers

@section AttributeSupplierBinding_ports Endpoints of Binding "AttributeSupplierBinding"

  - https://preprod.scap.autenticacao.gov.pt/DSS/ASService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/**

@page PDFSignatureSoapBinding Binding "PDFSignatureSoapBinding"

@section PDFSignatureSoapBinding_operations Operations of Binding "PDFSignatureSoapBinding"

  - @ref __ns4__Sign

@section PDFSignatureSoapBinding_ports Endpoints of Binding "PDFSignatureSoapBinding"

  - https://preprod.scap.autenticacao.gov.pt/PADES/PDFSignature

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Custom SOAP Header                                                         *
 *                                                                            *
\******************************************************************************/

#import "wsa.h"
struct SOAP_ENV__Header
{
   _wsa__MessageID    wsa__MessageID 0;
   _wsa__RelatesTo *  wsa__RelatesTo 0;
   _wsa__From *       wsa__From      0;
   _wsa__ReplyTo *    wsa__ReplyTo   0;
   _wsa__FaultTo *    wsa__FaultTo   0;
   _wsa__To           wsa__To        0;
   _wsa__Action       wsa__Action    0;
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AttributeClientServiceBinding                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Attributes                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Attributes" of service binding "AttributeClientServiceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/Attributes"

  - Addressing input action: "http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/Attributes"

  - Addressing output action: "http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/AttributesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Attributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__AttributeRequestType*          ns2__AttributeRequest,
    // output parameters:
    ns2__AttributeResponseType         &ns2__AttributeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Attributes(
    struct soap *soap,
    // input parameters:
    ns2__AttributeRequestType*          ns2__AttributeRequest,
    // output parameters:
    ns2__AttributeResponseType         &ns2__AttributeResponse
  );
@endcode

C++ proxy class (defined in soapAttributeClientServiceBindingProxy.h):
@code
  class AttributeClientServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAttributeClientServiceBindingService.h):
@code
  class AttributeClientServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Attributes SOAP
//gsoap ns1  service method-style:	Attributes document
//gsoap ns1  service method-encoding:	Attributes literal
//gsoap ns1  service method-input-action:	Attributes http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/Attributes
//gsoap ns1  service method-output-action:	Attributes http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/AttributesResponse
int __ns1__Attributes(
    ns2__AttributeRequestType*          ns2__AttributeRequest,	///< Input parameter
    ns2__AttributeResponseType         &ns2__AttributeResponse	///< Output parameter
);

/**

@page AttributeClientServiceBinding Binding "AttributeClientServiceBinding"

@section AttributeClientServiceBinding_policy_enablers Policy Enablers of Binding "AttributeClientServiceBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AttributeSupplierBinding                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AttributeSuppliers                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__AttributeSuppliers" of service binding "AttributeSupplierBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList"

  - Addressing input action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList"

  - Addressing output action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AttributeSuppliers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    ns3__AttributeSupplierResponseType &ns3__AttributeSupplierResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AttributeSuppliers(
    struct soap *soap,
    // input parameters:
    // output parameters:
    ns3__AttributeSupplierResponseType &ns3__AttributeSupplierResponse
  );
@endcode

C++ proxy class (defined in soapAttributeSupplierBindingProxy.h):
@code
  class AttributeSupplierBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAttributeSupplierBindingService.h):
@code
  class AttributeSupplierBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	AttributeSuppliers SOAP
//gsoap ns2  service method-style:	AttributeSuppliers document
//gsoap ns2  service method-encoding:	AttributeSuppliers literal
//gsoap ns2  service method-input-action:	AttributeSuppliers http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList
//gsoap ns2  service method-output-action:	AttributeSuppliers http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierListResponse
int __ns2__AttributeSuppliers(
    ns3__AttributeSupplierResponseType &ns3__AttributeSupplierResponse	///< Output parameter
);

/**

@page AttributeSupplierBinding Binding "AttributeSupplierBinding"

@section AttributeSupplierBinding_policy_enablers Policy Enablers of Binding "AttributeSupplierBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PDFSignatureSoapBinding                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__Sign                                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns4__Sign" of service binding "PDFSignatureSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.cartaodecidadao.pt/services/ccc/PDFSignature/Operations/Sign"

  - Addressing input action: "http://www.cartaodecidadao.pt/services/ccc/PDFSignature/Operations/Sign"

  - Addressing output action: "http://www.cartaodecidadao.pt/services/ccc/PDFSignature/Operations/SignResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__Sign(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns4__SignRequest*                   ns4__SignRequest_,
    // output parameters:
    ns4__SignResponse                  &ns4__SignResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__Sign(
    struct soap *soap,
    // input parameters:
    ns4__SignRequest*                   ns4__SignRequest_,
    // output parameters:
    ns4__SignResponse                  &ns4__SignResponse_
  );
@endcode

C++ proxy class (defined in soapPDFSignatureSoapBindingProxy.h):
@code
  class PDFSignatureSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapPDFSignatureSoapBindingService.h):
@code
  class PDFSignatureSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns4  service method-protocol:	Sign SOAP
//gsoap ns4  service method-style:	Sign document
//gsoap ns4  service method-encoding:	Sign literal
//gsoap ns4  service method-input-action:	Sign http://www.cartaodecidadao.pt/services/ccc/PDFSignature/Operations/Sign
//gsoap ns4  service method-output-action:	Sign http://www.cartaodecidadao.pt/services/ccc/PDFSignature/Operations/SignResponse
int __ns4__Sign(
    ns4__SignRequest*                   ns4__SignRequest_,	///< Input parameter
    ns4__SignResponse                  &ns4__SignResponse_	///< Output parameter
);

/**

@page PDFSignatureSoapBinding Binding "PDFSignatureSoapBinding"

@section PDFSignatureSoapBinding_policy_enablers Policy Enablers of Binding "PDFSignatureSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService"

@section ns2 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService"

  - <ns2:AttributeRequest> @ref _ns2__AttributeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AttributeRequest(struct soap*, _ns2__AttributeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AttributeRequest(struct soap*, _ns2__AttributeRequest*);
    @endcode

  - <ns2:AttributeResponse> @ref _ns2__AttributeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AttributeResponse(struct soap*, _ns2__AttributeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AttributeResponse(struct soap*, _ns2__AttributeResponse*);
    @endcode

  - <ns2:PSAAttributeRequest> @ref _ns2__PSAAttributeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__PSAAttributeRequest(struct soap*, _ns2__PSAAttributeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__PSAAttributeRequest(struct soap*, _ns2__PSAAttributeRequest*);
    @endcode

  - <ns2:SingleAttributeResponse> @ref _ns2__SingleAttributeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SingleAttributeResponse(struct soap*, _ns2__SingleAttributeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SingleAttributeResponse(struct soap*, _ns2__SingleAttributeResponse*);
    @endcode

@section ns5 Top-level root elements of schema "http://www.w3.org/2000/09/xmldsig#"

  - <ns5:Signature> @ref _ns5__Signature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Signature(struct soap*, _ns5__Signature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Signature(struct soap*, _ns5__Signature*);
    @endcode

  - <ns5:SignedInfo> @ref _ns5__SignedInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__SignedInfo(struct soap*, _ns5__SignedInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__SignedInfo(struct soap*, _ns5__SignedInfo*);
    @endcode

  - <ns5:CanonicalizationMethod> @ref _ns5__CanonicalizationMethod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__CanonicalizationMethod(struct soap*, _ns5__CanonicalizationMethod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__CanonicalizationMethod(struct soap*, _ns5__CanonicalizationMethod*);
    @endcode

  - <ns5:SignatureMethod> @ref _ns5__SignatureMethod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__SignatureMethod(struct soap*, _ns5__SignatureMethod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__SignatureMethod(struct soap*, _ns5__SignatureMethod*);
    @endcode

  - <ns5:Reference> @ref _ns5__Reference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Reference(struct soap*, _ns5__Reference*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Reference(struct soap*, _ns5__Reference*);
    @endcode

  - <ns5:Transforms> @ref _ns5__Transforms
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Transforms(struct soap*, _ns5__Transforms*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Transforms(struct soap*, _ns5__Transforms*);
    @endcode

  - <ns5:Transform> @ref _ns5__Transform
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Transform(struct soap*, _ns5__Transform*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Transform(struct soap*, _ns5__Transform*);
    @endcode

  - <ns5:DigestMethod> @ref _ns5__DigestMethod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__DigestMethod(struct soap*, _ns5__DigestMethod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__DigestMethod(struct soap*, _ns5__DigestMethod*);
    @endcode

  - <ns5:KeyInfo> @ref _ns5__KeyInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__KeyInfo(struct soap*, _ns5__KeyInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__KeyInfo(struct soap*, _ns5__KeyInfo*);
    @endcode

  - <ns5:X509Data> @ref _ns5__X509Data
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509Data(struct soap*, _ns5__X509Data*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509Data(struct soap*, _ns5__X509Data*);
    @endcode

  - <ns5:Object> @ref _ns5__Object
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Object(struct soap*, _ns5__Object*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Object(struct soap*, _ns5__Object*);
    @endcode

  - <ns5:X509Certificate> @ref _ns5__X509Certificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509Certificate(struct soap*, _ns5__X509Certificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509Certificate(struct soap*, _ns5__X509Certificate*);
    @endcode

  - <ns5:DigestValue> @ref _ns5__DigestValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__DigestValue(struct soap*, _ns5__DigestValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__DigestValue(struct soap*, _ns5__DigestValue*);
    @endcode

  - <ns5:SignatureValue> @ref _ns5__SignatureValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__SignatureValue(struct soap*, _ns5__SignatureValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__SignatureValue(struct soap*, _ns5__SignatureValue*);
    @endcode

  - <ns5:X509IssuerName> @ref _ns5__X509IssuerName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509IssuerName(struct soap*, _ns5__X509IssuerName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509IssuerName(struct soap*, _ns5__X509IssuerName*);
    @endcode

  - <ns5:X509SerialNumber> @ref _ns5__X509SerialNumber
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509SerialNumber(struct soap*, _ns5__X509SerialNumber*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509SerialNumber(struct soap*, _ns5__X509SerialNumber*);
    @endcode

@section ns3 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"

  - <ns3:Attribute> @ref _ns3__Attribute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__Attribute(struct soap*, _ns3__Attribute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__Attribute(struct soap*, _ns3__Attribute*);
    @endcode

  - <ns3:SignatureAttribute> @ref _ns3__SignatureAttribute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__SignatureAttribute(struct soap*, _ns3__SignatureAttribute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__SignatureAttribute(struct soap*, _ns3__SignatureAttribute*);
    @endcode

@section ns4 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/Types"

@section ns1 Top-level root elements of schema "http://uri.etsi.org/01903/v1.3.2#"

  - <ns1:QualifyingProperties> @ref _ns1__QualifyingProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QualifyingProperties(struct soap*, _ns1__QualifyingProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QualifyingProperties(struct soap*, _ns1__QualifyingProperties*);
    @endcode

  - <ns1:SignedProperties> @ref _ns1__SignedProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SignedProperties(struct soap*, _ns1__SignedProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SignedProperties(struct soap*, _ns1__SignedProperties*);
    @endcode

  - <ns1:SignedSignatureProperties> @ref _ns1__SignedSignatureProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SignedSignatureProperties(struct soap*, _ns1__SignedSignatureProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SignedSignatureProperties(struct soap*, _ns1__SignedSignatureProperties*);
    @endcode

  - <ns1:SigningCertificate> @ref _ns1__SigningCertificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SigningCertificate(struct soap*, _ns1__SigningCertificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SigningCertificate(struct soap*, _ns1__SigningCertificate*);
    @endcode

  - <ns1:Cert> @ref _ns1__Cert
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Cert(struct soap*, _ns1__Cert*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Cert(struct soap*, _ns1__Cert*);
    @endcode

  - <ns1:CertDigest> @ref _ns1__CertDigest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CertDigest(struct soap*, _ns1__CertDigest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CertDigest(struct soap*, _ns1__CertDigest*);
    @endcode

  - <ns1:IssuerSerial> @ref _ns1__IssuerSerial
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__IssuerSerial(struct soap*, _ns1__IssuerSerial*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__IssuerSerial(struct soap*, _ns1__IssuerSerial*);
    @endcode

  - <ns1:SigningTime> @ref _ns1__SigningTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SigningTime(struct soap*, _ns1__SigningTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SigningTime(struct soap*, _ns1__SigningTime*);
    @endcode

  - <ns1:SignerRole> @ref _ns1__SignerRole
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SignerRole(struct soap*, _ns1__SignerRole*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SignerRole(struct soap*, _ns1__SignerRole*);
    @endcode

  - <ns1:ClaimedRoles> @ref _ns1__ClaimedRoles
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ClaimedRoles(struct soap*, _ns1__ClaimedRoles*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ClaimedRoles(struct soap*, _ns1__ClaimedRoles*);
    @endcode

  - <ns1:ClaimedRole> @ref _ns1__ClaimedRole
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ClaimedRole(struct soap*, _ns1__ClaimedRole*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ClaimedRole(struct soap*, _ns1__ClaimedRole*);
    @endcode

  - <ns1:UnsignedProperties> @ref _ns1__UnsignedProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnsignedProperties(struct soap*, _ns1__UnsignedProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnsignedProperties(struct soap*, _ns1__UnsignedProperties*);
    @endcode

  - <ns1:UnsignedSignatureProperties> @ref _ns1__UnsignedSignatureProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnsignedSignatureProperties(struct soap*, _ns1__UnsignedSignatureProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnsignedSignatureProperties(struct soap*, _ns1__UnsignedSignatureProperties*);
    @endcode

  - <ns1:CounterSignature> @ref _ns1__CounterSignature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CounterSignature(struct soap*, _ns1__CounterSignature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CounterSignature(struct soap*, _ns1__CounterSignature*);
    @endcode

  - <ns1:SignatureTimeStamp> @ref _ns1__SignatureTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SignatureTimeStamp(struct soap*, _ns1__SignatureTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SignatureTimeStamp(struct soap*, _ns1__SignatureTimeStamp*);
    @endcode

  - <ns1:EncapsulatedTimeStamp> @ref _ns1__EncapsulatedTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EncapsulatedTimeStamp(struct soap*, _ns1__EncapsulatedTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EncapsulatedTimeStamp(struct soap*, _ns1__EncapsulatedTimeStamp*);
    @endcode

  - <ns1:CompleteCertificateRefs> @ref _ns1__CompleteCertificateRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CompleteCertificateRefs(struct soap*, _ns1__CompleteCertificateRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CompleteCertificateRefs(struct soap*, _ns1__CompleteCertificateRefs*);
    @endcode

  - <ns1:CertRefs> @ref _ns1__CertRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CertRefs(struct soap*, _ns1__CertRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CertRefs(struct soap*, _ns1__CertRefs*);
    @endcode

  - <ns1:CompleteRevocationRefs> @ref _ns1__CompleteRevocationRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CompleteRevocationRefs(struct soap*, _ns1__CompleteRevocationRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CompleteRevocationRefs(struct soap*, _ns1__CompleteRevocationRefs*);
    @endcode

  - <ns1:CRLRefs> @ref _ns1__CRLRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CRLRefs(struct soap*, _ns1__CRLRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CRLRefs(struct soap*, _ns1__CRLRefs*);
    @endcode

  - <ns1:CRLRef> @ref _ns1__CRLRef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CRLRef(struct soap*, _ns1__CRLRef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CRLRef(struct soap*, _ns1__CRLRef*);
    @endcode

  - <ns1:DigestAlgAndValue> @ref _ns1__DigestAlgAndValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DigestAlgAndValue(struct soap*, _ns1__DigestAlgAndValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DigestAlgAndValue(struct soap*, _ns1__DigestAlgAndValue*);
    @endcode

  - <ns1:CRLIdentifier> @ref _ns1__CRLIdentifier
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CRLIdentifier(struct soap*, _ns1__CRLIdentifier*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CRLIdentifier(struct soap*, _ns1__CRLIdentifier*);
    @endcode

  - <ns1:Issuer> @ref _ns1__Issuer
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Issuer(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Issuer(struct soap*, _XML);
    @endcode

  - <ns1:IssueTime> @ref _ns1__IssueTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__IssueTime(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__IssueTime(struct soap*, _XML);
    @endcode

  - <ns1:Number> @ref _ns1__Number
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Number(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Number(struct soap*, _XML);
    @endcode

  - <ns1:OCSPRefs> @ref _ns1__OCSPRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OCSPRefs(struct soap*, _ns1__OCSPRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OCSPRefs(struct soap*, _ns1__OCSPRefs*);
    @endcode

  - <ns1:OCSPRef> @ref _ns1__OCSPRef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OCSPRef(struct soap*, _ns1__OCSPRef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OCSPRef(struct soap*, _ns1__OCSPRef*);
    @endcode

  - <ns1:OCSPIdentifier> @ref _ns1__OCSPIdentifier
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OCSPIdentifier(struct soap*, _ns1__OCSPIdentifier*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OCSPIdentifier(struct soap*, _ns1__OCSPIdentifier*);
    @endcode

  - <ns1:ResponderID> @ref _ns1__ResponderID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ResponderID(struct soap*, _ns1__ResponderID*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ResponderID(struct soap*, _ns1__ResponderID*);
    @endcode

  - <ns1:ByName> @ref _ns1__ByName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ByName(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ByName(struct soap*, _XML);
    @endcode

  - <ns1:ProducedAt> @ref _ns1__ProducedAt
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ProducedAt(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ProducedAt(struct soap*, _XML);
    @endcode

  - <ns1:SigAndRefsTimeStamp> @ref _ns1__SigAndRefsTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SigAndRefsTimeStamp(struct soap*, _ns1__SigAndRefsTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SigAndRefsTimeStamp(struct soap*, _ns1__SigAndRefsTimeStamp*);
    @endcode

  - <ns1:CertificateValues> @ref _ns1__CertificateValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CertificateValues(struct soap*, _ns1__CertificateValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CertificateValues(struct soap*, _ns1__CertificateValues*);
    @endcode

  - <ns1:EncapsulatedX509Certificate> @ref _ns1__EncapsulatedX509Certificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EncapsulatedX509Certificate(struct soap*, _ns1__EncapsulatedX509Certificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EncapsulatedX509Certificate(struct soap*, _ns1__EncapsulatedX509Certificate*);
    @endcode

  - <ns1:RevocationValues> @ref _ns1__RevocationValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RevocationValues(struct soap*, _ns1__RevocationValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RevocationValues(struct soap*, _ns1__RevocationValues*);
    @endcode

  - <ns1:CRLValues> @ref _ns1__CRLValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CRLValues(struct soap*, _ns1__CRLValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CRLValues(struct soap*, _ns1__CRLValues*);
    @endcode

  - <ns1:EncapsulatedCRLValue> @ref _ns1__EncapsulatedCRLValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EncapsulatedCRLValue(struct soap*, _ns1__EncapsulatedCRLValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EncapsulatedCRLValue(struct soap*, _ns1__EncapsulatedCRLValue*);
    @endcode

  - <ns1:OCSPValues> @ref _ns1__OCSPValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OCSPValues(struct soap*, _ns1__OCSPValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OCSPValues(struct soap*, _ns1__OCSPValues*);
    @endcode

  - <ns1:EncapsulatedOCSPValue> @ref _ns1__EncapsulatedOCSPValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EncapsulatedOCSPValue(struct soap*, _ns1__EncapsulatedOCSPValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EncapsulatedOCSPValue(struct soap*, _ns1__EncapsulatedOCSPValue*);
    @endcode

  - <ns1:ArchiveTimeStamp> @ref _ns1__ArchiveTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ArchiveTimeStamp(struct soap*, _ns1__ArchiveTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ArchiveTimeStamp(struct soap*, _ns1__ArchiveTimeStamp*);
    @endcode

@section ns7 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG"

  - <ns7:SVGList> @ref _ns7__SVGList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns7__SVGList(struct soap*, _ns7__SVGList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns7__SVGList(struct soap*, _ns7__SVGList*);
    @endcode

  - <ns7:SVG> @ref _ns7__SVG
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns7__SVG(struct soap*, _ns7__SVG*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns7__SVG(struct soap*, _ns7__SVG*);
    @endcode

@section ns2 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"

@section ns3 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"

  - <ns3:AttributeSupplierResponse> @ref _ns3__AttributeSupplierResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__AttributeSupplierResponse(struct soap*, _ns3__AttributeSupplierResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__AttributeSupplierResponse(struct soap*, _ns3__AttributeSupplierResponse*);
    @endcode

@section ns4 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature"

  - <ns4:SignRequest> @ref _ns4__SignRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__SignRequest(struct soap*, _ns4__SignRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__SignRequest(struct soap*, _ns4__SignRequest*);
    @endcode

  - <ns4:SignResponse> @ref _ns4__SignResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__SignResponse(struct soap*, _ns4__SignResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__SignResponse(struct soap*, _ns4__SignResponse*);
    @endcode

*/

/* End of SCAP-Services.h */
