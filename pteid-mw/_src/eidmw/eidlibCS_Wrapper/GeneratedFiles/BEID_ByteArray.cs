/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace be.belgium.eid {

using System;
using System.Runtime.InteropServices;

public class BEID_ByteArray : BEID_Object {
  private HandleRef swigCPtr;

  internal BEID_ByteArray(IntPtr cPtr, bool cMemoryOwn) : base(beidlib_dotNetPINVOKE.BEID_ByteArrayUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BEID_ByteArray obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BEID_ByteArray() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        beidlib_dotNetPINVOKE.delete_BEID_ByteArray(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BEID_ByteArray() : this(beidlib_dotNetPINVOKE.new_BEID_ByteArray__SWIG_0(), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public BEID_ByteArray(BEID_ByteArray bytearray) : this(beidlib_dotNetPINVOKE.new_BEID_ByteArray__SWIG_1(BEID_ByteArray.getCPtr(bytearray)), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public BEID_ByteArray(byte[] pucData, uint ulSize) : this(beidlib_dotNetPINVOKE.new_BEID_ByteArray__SWIG_2(pucData, ulSize), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Append(byte[] pucData, uint ulSize) {
    beidlib_dotNetPINVOKE.BEID_ByteArray_Append__SWIG_0(swigCPtr, pucData, ulSize);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Append(BEID_ByteArray data) {
    beidlib_dotNetPINVOKE.BEID_ByteArray_Append__SWIG_1(swigCPtr, BEID_ByteArray.getCPtr(data));
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    beidlib_dotNetPINVOKE.BEID_ByteArray_Clear(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Equals(BEID_ByteArray data) {
    bool ret = beidlib_dotNetPINVOKE.BEID_ByteArray_Equals(swigCPtr, BEID_ByteArray.getCPtr(data));
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Size() {
    uint ret = beidlib_dotNetPINVOKE.BEID_ByteArray_Size(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte[] GetBytes() { 
	byte[] rslt = new byte[Size()];
	IntPtr pt = beidlib_dotNetPINVOKE.BEID_ByteArray_GetBytes(swigCPtr);
	if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
	Marshal.Copy(pt, rslt, 0,(int) Size());
	return rslt; 
}

  public bool writeToFile(string csFilePath) {
    bool ret = beidlib_dotNetPINVOKE.BEID_ByteArray_writeToFile(swigCPtr, csFilePath);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_ByteArray assign(BEID_ByteArray bytearray) {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_ByteArray_assign(swigCPtr, BEID_ByteArray.getCPtr(bytearray)), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
