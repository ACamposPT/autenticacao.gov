/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace be.belgium.eid {

using System;
using System.Runtime.InteropServices;

public class BEID_Card : BEID_Object {
  private HandleRef swigCPtr;

  internal BEID_Card(IntPtr cPtr, bool cMemoryOwn) : base(beidlib_dotNetPINVOKE.BEID_CardUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BEID_Card obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BEID_Card() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        beidlib_dotNetPINVOKE.delete_BEID_Card(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual BEID_CardType getType() {
    BEID_CardType ret = (BEID_CardType)beidlib_dotNetPINVOKE.BEID_Card_getType(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual BEID_XMLDoc getDocument(BEID_DocumentType type) {
    BEID_XMLDoc ret = new BEID_XMLDoc(beidlib_dotNetPINVOKE.BEID_Card_getDocument(swigCPtr, (int)type), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual BEID_ByteArray getRawData(BEID_RawDataType type) {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_Card_getRawData(swigCPtr, (int)type), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual BEID_ByteArray sendAPDU(BEID_ByteArray cmd) {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_Card_sendAPDU(swigCPtr, BEID_ByteArray.getCPtr(cmd)), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual BEID_ByteArray readFile(string fileID, uint ulOffset, uint ulMaxLength) {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_Card_readFile__SWIG_0(swigCPtr, fileID, ulOffset, ulMaxLength), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual BEID_ByteArray readFile(string fileID, uint ulOffset) {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_Card_readFile__SWIG_1(swigCPtr, fileID, ulOffset), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual BEID_ByteArray readFile(string fileID) {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_Card_readFile__SWIG_2(swigCPtr, fileID), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool writeFile(string fileID, BEID_ByteArray oData, uint ulOffset) {
    bool ret = beidlib_dotNetPINVOKE.BEID_Card_writeFile__SWIG_0(swigCPtr, fileID, BEID_ByteArray.getCPtr(oData), ulOffset);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool writeFile(string fileID, BEID_ByteArray oData) {
    bool ret = beidlib_dotNetPINVOKE.BEID_Card_writeFile__SWIG_1(swigCPtr, fileID, BEID_ByteArray.getCPtr(oData));
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
