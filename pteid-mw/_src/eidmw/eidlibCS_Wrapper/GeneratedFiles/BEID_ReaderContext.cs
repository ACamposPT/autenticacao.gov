/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace be.belgium.eid {

using System;
using System.Runtime.InteropServices;

public class BEID_ReaderContext : BEID_Object {
  private HandleRef swigCPtr;

  internal BEID_ReaderContext(IntPtr cPtr, bool cMemoryOwn) : base(beidlib_dotNetPINVOKE.BEID_ReaderContextUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BEID_ReaderContext obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BEID_ReaderContext() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        beidlib_dotNetPINVOKE.delete_BEID_ReaderContext(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BEID_ReaderContext(BEID_FileType fileType, string fileName) : this(beidlib_dotNetPINVOKE.new_BEID_ReaderContext__SWIG_0((int)fileType, fileName), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public BEID_ReaderContext(BEID_FileType fileType, BEID_ByteArray data) : this(beidlib_dotNetPINVOKE.new_BEID_ReaderContext__SWIG_1((int)fileType, BEID_ByteArray.getCPtr(data)), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public BEID_ReaderContext(BEID_RawData_Eid data) : this(beidlib_dotNetPINVOKE.new_BEID_ReaderContext__SWIG_2(BEID_RawData_Eid.getCPtr(data)), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public BEID_ReaderContext(BEID_RawData_Sis data) : this(beidlib_dotNetPINVOKE.new_BEID_ReaderContext__SWIG_3(BEID_RawData_Sis.getCPtr(data)), true) {
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = beidlib_dotNetPINVOKE.BEID_ReaderContext_getName(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCardPresent() {
    bool ret = beidlib_dotNetPINVOKE.BEID_ReaderContext_isCardPresent(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void releaseCard(bool bAllReference) {
    beidlib_dotNetPINVOKE.BEID_ReaderContext_releaseCard__SWIG_0(swigCPtr, bAllReference);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void releaseCard() {
    beidlib_dotNetPINVOKE.BEID_ReaderContext_releaseCard__SWIG_1(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isCardChanged(ref uint ulOldId) {
    bool ret = beidlib_dotNetPINVOKE.BEID_ReaderContext_isCardChanged(swigCPtr, ref ulOldId);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_CardType getCardType() {
    BEID_CardType ret = (BEID_CardType)beidlib_dotNetPINVOKE.BEID_ReaderContext_getCardType(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_Card getCard() { 
	BEID_CardType cardType=getCardType();

	switch(cardType)
	{
	case BEID_CardType.BEID_CARDTYPE_EID:			
	case BEID_CardType.BEID_CARDTYPE_KIDS:
	case BEID_CardType.BEID_CARDTYPE_FOREIGNER:
		return getEIDCard();			

	case BEID_CardType.BEID_CARDTYPE_SIS:			
		return getSISCard();			

    default:										
		throw new BEID_ExCardTypeUnknown();
	}
}

  public BEID_EIDCard getEIDCard() { 
	BEID_CardType cardType=getCardType();

	switch(cardType)
	{
	case BEID_CardType.BEID_CARDTYPE_EID:			
		BEID_EIDCard ret = new BEID_EIDCard(beidlib_dotNetPINVOKE.BEID_ReaderContext_getEIDCard(swigCPtr), false);	
		if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
		return ret;

	case BEID_CardType.BEID_CARDTYPE_KIDS:			
		return getKidsCard();		

	case BEID_CardType.BEID_CARDTYPE_FOREIGNER:		
		return getForeignerCard();	

    default:										
		throw new BEID_ExCardBadType();
	}
}

  public BEID_KidsCard getKidsCard() {
    BEID_KidsCard ret = new BEID_KidsCard(beidlib_dotNetPINVOKE.BEID_ReaderContext_getKidsCard(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_ForeignerCard getForeignerCard() {
    BEID_ForeignerCard ret = new BEID_ForeignerCard(beidlib_dotNetPINVOKE.BEID_ReaderContext_getForeignerCard(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_SISCard getSISCard() {
    BEID_SISCard ret = new BEID_SISCard(beidlib_dotNetPINVOKE.BEID_ReaderContext_getSISCard(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint SetEventCallback(BEID_SetEventDelegate callback, IntPtr pvRef) { 
	beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.countRef++;	
	IntPtr ptrCount = new IntPtr(beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.countRef);

	//We add the references to the hash table
	beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRef callbackRef =  new beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRef();
	callbackRef.functionRef = callback;
	callbackRef.ptrRef = pvRef;
	callbackRef.handleRef = 0;
	beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRefs.Add(beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.countRef,callbackRef);

	//We call the SetEvent with the internal reference (countRef)
	uint ulRslt = beidlib_dotNetPINVOKE.BEID_ReaderContext_SetEventCallback(swigCPtr, 0, ptrCount);
	if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) 
	{
		beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRefs.Remove(callbackRef);
		throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
	}
	else
	{
		callbackRef.handleRef = ulRslt;
	}

	return ulRslt; 
}

  public void StopEventCallback(uint ulHandle) { 
	beidlib_dotNetPINVOKE.BEID_ReaderContext_StopEventCallback(swigCPtr, ulHandle);
	if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
	
	//Remove ulHandle from delegateRefs 
	foreach(beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRef callbackRef in beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRefs.Values )
    {
      if(callbackRef.handleRef==ulHandle)
      {
          beidlib_dotNetPINVOKE.CUSTOM_SetEventHelper.delegateRefs.Remove(callbackRef);
          break;
      }
    }	
}

  public void BeginTransaction() {
    beidlib_dotNetPINVOKE.BEID_ReaderContext_BeginTransaction(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EndTransaction() {
    beidlib_dotNetPINVOKE.BEID_ReaderContext_EndTransaction(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isVirtualReader() {
    bool ret = beidlib_dotNetPINVOKE.BEID_ReaderContext_isVirtualReader(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
