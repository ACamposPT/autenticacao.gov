/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace be.belgium.eid {

using System;
using System.Runtime.InteropServices;

public class BEID_ReaderSet : BEID_Object {
  private HandleRef swigCPtr;

  internal BEID_ReaderSet(IntPtr cPtr, bool cMemoryOwn) : base(beidlib_dotNetPINVOKE.BEID_ReaderSetUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BEID_ReaderSet obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BEID_ReaderSet() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        beidlib_dotNetPINVOKE.delete_BEID_ReaderSet(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static BEID_ReaderSet instance() {
    BEID_ReaderSet ret = new BEID_ReaderSet(beidlib_dotNetPINVOKE.BEID_ReaderSet_instance(), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void initSDK(bool bManageTestCard) {
    beidlib_dotNetPINVOKE.BEID_ReaderSet_initSDK__SWIG_0(bManageTestCard);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void initSDK() {
    beidlib_dotNetPINVOKE.BEID_ReaderSet_initSDK__SWIG_1();
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void releaseSDK() {
    beidlib_dotNetPINVOKE.BEID_ReaderSet_releaseSDK();
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void releaseReaders(bool bAllReference) {
    beidlib_dotNetPINVOKE.BEID_ReaderSet_releaseReaders__SWIG_0(swigCPtr, bAllReference);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void releaseReaders() {
    beidlib_dotNetPINVOKE.BEID_ReaderSet_releaseReaders__SWIG_1(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isReadersChanged() {
    bool ret = beidlib_dotNetPINVOKE.BEID_ReaderSet_isReadersChanged(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string[] readerList(bool bForceRefresh) { 
	IntPtr p = beidlib_dotNetPINVOKE.BEID_ReaderSet_readerList__SWIG_0(swigCPtr, bForceRefresh);
	if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
	string[] rslt = beidlib_dotNetPINVOKE.custom_StringArrayResult;
	return rslt; 
}

  public string[] readerList() { 
	IntPtr p = beidlib_dotNetPINVOKE.BEID_ReaderSet_readerList__SWIG_1(swigCPtr);
	if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
	string[] rslt = beidlib_dotNetPINVOKE.custom_StringArrayResult;
	return rslt; 
}

  public BEID_ReaderContext getReader() {
    BEID_ReaderContext ret = new BEID_ReaderContext(beidlib_dotNetPINVOKE.BEID_ReaderSet_getReader(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_ReaderContext getReaderByName(string readerName) {
    BEID_ReaderContext ret = new BEID_ReaderContext(beidlib_dotNetPINVOKE.BEID_ReaderSet_getReaderByName(swigCPtr, readerName), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint readerCount(bool bForceRefresh) {
    uint ret = beidlib_dotNetPINVOKE.BEID_ReaderSet_readerCount__SWIG_0(swigCPtr, bForceRefresh);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint readerCount() {
    uint ret = beidlib_dotNetPINVOKE.BEID_ReaderSet_readerCount__SWIG_1(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getReaderName(uint ulIndex) {
    string ret = beidlib_dotNetPINVOKE.BEID_ReaderSet_getReaderName(swigCPtr, ulIndex);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_ReaderContext getReaderByNum(uint ulIndex) {
    BEID_ReaderContext ret = new BEID_ReaderContext(beidlib_dotNetPINVOKE.BEID_ReaderSet_getReaderByNum(swigCPtr, ulIndex), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BEID_ReaderContext getReaderByCardSerialNumber(string cardSerialNumber) {
    BEID_ReaderContext ret = new BEID_ReaderContext(beidlib_dotNetPINVOKE.BEID_ReaderSet_getReaderByCardSerialNumber(swigCPtr, cardSerialNumber), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool flushCache() {
    bool ret = beidlib_dotNetPINVOKE.BEID_ReaderSet_flushCache(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
